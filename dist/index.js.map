{"version":3,"file":"index.js","sources":["../src/logger/level.ts","../src/logger/logger.ts","../src/logger/console.ts","../src/logger/index.ts","../src/cms/cms-events.ts","../src/emitter.ts","../src/cms/rpc.ts","../src/cms/cms.ts","../src/cms/cms14.ts","../src/url/utils.ts","../src/url/builder.ts","../src/url/module.ts","../src/url/builder09.ts","../src/url/module09.ts","../src/cms/post-message.ts","../src/cms/index.ts","../src/configuration.ts","../src/page/link.ts","../src/page/factory.ts","../src/page/link-factory.ts","../src/page/meta-collection-factory.ts","../src/page/component.ts","../src/page/component09.ts","../src/page/container.ts","../src/page/container09.ts","../src/page/page-events.ts","../src/page/reference.ts","../src/page/container-item.ts","../src/page/container-item09.ts","../src/page/meta.ts","../src/page/meta-comment.ts","../src/page/meta-factory.ts","../src/page/meta-collection.ts","../src/page/button-factory.ts","../src/page/component-factory.ts","../src/page/content-factory.ts","../src/page/link-rewriter.ts","../src/page/page.ts","../src/page/component-factory09.ts","../src/page/content-factory09.ts","../src/page/page09.ts","../src/page/content09.ts","../src/page/document.ts","../src/page/image.ts","../src/page/image-set.ts","../src/page/button-manage-content.ts","../src/page/menu-item.ts","../src/page/menu.ts","../src/page/page-factory.ts","../src/page/pagination-item.ts","../src/page/pagination.ts","../src/page/module.ts","../src/page/module09.ts","../src/page/index.ts","../src/services/cookie.ts","../src/services/campaign.ts","../src/services/segmentation.ts","../src/spa/api.ts","../src/spa/spa.ts","../src/spa/index.ts","../src/index.ts"],"sourcesContent":["/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line no-shadow\nexport enum Level {\n  Debug = 'debug',\n  Info = 'info',\n  Warn = 'warn',\n  Error = 'error',\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable } from 'inversify';\nimport { Level } from './level';\n\nexport interface Logger {\n  level: Level;\n  debug(...message: unknown[]): void;\n  info(...message: unknown[]): void;\n  warn(...message: unknown[]): void;\n  error(...message: unknown[]): void;\n}\n\n@injectable()\nexport abstract class Logger implements Logger {\n  level = Level.Error;\n\n  constructor() {\n    this.debug = this.log.bind(this, Level.Debug);\n    this.info = this.log.bind(this, Level.Info);\n    this.warn = this.log.bind(this, Level.Warn);\n    this.error = this.log.bind(this, Level.Error);\n  }\n\n  private log(level: Level, ...message: unknown[]): void {\n    const levels = Object.values(Level);\n    if (!levels.includes(level) || levels.indexOf(level) < levels.indexOf(this.level)) {\n      return;\n    }\n\n    this.write(level, '[SPA]', `[${level.toUpperCase()}]`, ...message);\n  }\n\n  protected abstract write(level: Level, ...message: unknown[]): void;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable } from 'inversify';\nimport { Level } from './level';\nimport { Logger } from './logger';\n\nexport const ConsoleToken = Symbol.for('ConsoleToken');\n\n@injectable()\nexport class ConsoleLogger extends Logger {\n  constructor(@inject(ConsoleToken) private console: Console) {\n    super();\n  }\n\n  protected write(level: Level, ...message: unknown[]): void {\n    this.console[level](...message);\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerModule } from 'inversify';\nimport { ConsoleLogger, ConsoleToken } from './console';\nimport { Logger } from './logger';\n\nexport function LoggerModule(): ContainerModule {\n  return new ContainerModule((bind) => {\n    bind(ConsoleToken).toConstantValue(console);\n    bind(ConsoleLogger).toSelf().inSingletonScope();\n    bind(Logger).toService(ConsoleLogger);\n  });\n}\n\nexport { Level } from './level';\nexport { Logger } from './logger';\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Typed } from 'emittery';\n\nexport const CmsEventBusService = Symbol('CmsEventBusService');\n\n/**\n * Channel Manager component update event.\n */\nexport interface CmsUpdateEvent {\n  /**\n   * Component's id.\n   */\n  id: string;\n\n  /**\n   * Updated component's properties.\n   */\n  properties: Record<string, unknown>;\n}\n\n/**\n * SPA page rendered event.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface PageReadyEvent {}\n\nexport interface CmsEvents {\n  'cms.update': CmsUpdateEvent;\n  'page.ready': PageReadyEvent;\n}\n\nexport type CmsEventBus = Typed<CmsEvents>;\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Events, Typed } from 'emittery';\n\ntype Constructor = new (...args: any[]) => any;\n\n/**\n * Event listener.\n */\ntype Listener<T, U extends Extract<keyof T, string>> = (eventData: T[U]) => any;\n\n/**\n * Function to unsubscribe a listener from an event.\n */\ntype UnsubscribeFn = () => void;\n\n/**\n * Event emitter.\n */\nexport interface Emitter<T> {\n  /**\n   * Subscribes for an event.\n   * @param eventName The event name.\n   * @param listener The event listener.\n   * @return The unsubscribe function.\n   */\n  on<U extends Extract<keyof T, string>>(eventName: U, listener: Listener<T, U>): UnsubscribeFn;\n\n  /**\n   * Unsubscribes from an event.\n   * @param eventName The event name.\n   * @param listener The event listener.\n   */\n  off<U extends Extract<keyof T, string>>(eventName: U, listener: Listener<T, U>): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function EmitterMixin<T extends Constructor, U extends Events>(Super: T) {\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  return class EmitterMixin extends Super implements Emitter<U> {\n    /**\n     * @todo should be private\n     * @see https://github.com/Microsoft/TypeScript/issues/17293\n     */\n    /* private */ emitter = new Typed<U>();\n\n    on = this.emitter.on.bind(this.emitter);\n\n    off = this.emitter.off.bind(this.emitter);\n\n    /**\n     * @todo should be private\n     * @see https://github.com/Microsoft/TypeScript/issues/17293\n     */\n    /* protected */ emit = this.emitter.emit.bind(this.emitter);\n  };\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Emitter, EmitterMixin } from '../emitter';\n\nexport const RpcClientService = Symbol.for('RpcClientService');\nexport const RpcServerService = Symbol.for('RpcServerService');\n\ntype Callable<T = any, U extends unknown[] = any[]> = (...args: U) => T;\n\nconst TYPE_EVENT = 'brxm:event';\nconst TYPE_RESPONSE = 'brxm:response';\nconst TYPE_REQUEST = 'brxm:request';\nconst STATE_FULFILLED = 'fulfilled';\nconst STATE_REJECTED = 'rejected';\n\nexport interface Event {\n  type: typeof TYPE_EVENT;\n  event: string;\n  payload?: any;\n}\n\nexport interface Request {\n  type: typeof TYPE_REQUEST;\n  id: string;\n  command: string;\n  payload: any[];\n}\n\nexport interface Response {\n  type: typeof TYPE_RESPONSE;\n  id: string;\n  state: typeof STATE_FULFILLED | typeof STATE_REJECTED;\n  result: any;\n}\n\nexport type Message = Event | Request | Response;\nexport type Procedures = Record<string, Callable>;\nexport type Events = Record<string, any>;\n\nexport interface RpcClient<TProcedures extends Procedures, TEvents extends Events> extends Emitter<TEvents> {\n  call<K extends keyof TProcedures & string>(\n    command: K,\n    ...params: Parameters<TProcedures[K]>\n  ): Promise<ReturnType<TProcedures[K]>>;\n}\n\nexport interface RpcServer<TProcedures extends Procedures, TEvents extends Events> {\n  register<K extends keyof TProcedures & string>(\n    command: K,\n    callback: Callable<Promise<ReturnType<TProcedures[K]>>, Parameters<TProcedures[K]>>,\n  ): void;\n  trigger<K extends keyof TEvents>(event: K, payload: TEvents[K]): void;\n}\n\nclass Dummy {}\n\nexport abstract class Rpc<\n  TRemoteProcedures extends Procedures,\n  TRemoteEvents extends Events,\n  TProcedures extends Procedures,\n  TEvents extends Events,\n>\n  extends EmitterMixin<typeof Dummy, Events>(Dummy)\n  implements RpcClient<TRemoteProcedures, TRemoteEvents>, RpcServer<TProcedures, TEvents> {\n  private calls = new Map<string, [Callable, Callable]>();\n\n  private callbacks = new Map<keyof TProcedures, Callable<Promise<any>, any>>();\n\n  private generateId(): string {\n    let id: string;\n    do {\n      id = `${Math.random()}`.slice(2);\n    } while (this.calls.has(id));\n\n    return id;\n  }\n\n  call<K extends keyof TRemoteProcedures & string>(\n    command: K,\n    ...payload: Parameters<TRemoteProcedures[K]>\n  ): Promise<ReturnType<TRemoteProcedures[K]>> {\n    return new Promise<ReturnType<TRemoteProcedures[K]>>((resolve, reject) => {\n      const id = this.generateId();\n\n      this.calls.set(id, [resolve, reject]);\n      this.send({ id, command, payload, type: TYPE_REQUEST });\n    });\n  }\n\n  register<K extends keyof TProcedures & string>(\n    command: K,\n    callback: Callable<Promise<ReturnType<TProcedures[K]>>, Parameters<TProcedures[K]>>,\n  ): void {\n    this.callbacks.set(command, callback);\n  }\n\n  trigger<K extends keyof TEvents>(event: K & string, payload: TEvents[K]): void {\n    this.send({ event, payload, type: TYPE_EVENT });\n  }\n\n  protected process(message: Message): void {\n    // eslint-disable-next-line default-case\n    switch (message?.type) {\n      case TYPE_EVENT:\n        this.processEvent(message);\n        break;\n      case TYPE_RESPONSE:\n        this.processResponse(message);\n        break;\n      case TYPE_REQUEST:\n        this.processRequest(message);\n        break;\n    }\n  }\n\n  private processEvent(event: Event): void {\n    this.emit(event.event, event.payload);\n  }\n\n  private processResponse(response: Response): void {\n    if (!this.calls.has(response.id)) {\n      return;\n    }\n\n    const [resolve, reject] = this.calls.get(response.id)!;\n    this.calls.delete(response.id);\n\n    if (response.state === STATE_REJECTED) {\n      reject(response.result);\n    }\n\n    resolve(response.result);\n  }\n\n  private async processRequest(request: Request): Promise<void> {\n    const callback = this.callbacks.get(request.command);\n\n    if (!callback) {\n      return;\n    }\n\n    try {\n      this.send({\n        type: TYPE_RESPONSE,\n        id: request.id,\n        state: STATE_FULFILLED,\n        result: await callback(...request.payload),\n      });\n    } catch (result) {\n      this.send({\n        result,\n        type: TYPE_RESPONSE,\n        id: request.id,\n        state: STATE_REJECTED,\n      });\n    }\n  }\n\n  protected abstract send(message: Message): void;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable, optional } from 'inversify';\nimport { Logger } from '../logger';\nimport { CmsEventBus, CmsEventBusService, CmsUpdateEvent } from './cms-events';\nimport { RpcClientService, RpcServerService, Procedures, RpcClient, RpcServer } from './rpc';\n\nexport const CmsService = Symbol.for('CmsService');\n\nconst GLOBAL_WINDOW = typeof window === 'undefined' ? undefined : window;\n\nexport interface CmsOptions {\n  /**\n   * The window reference for the CMS integration.\n   * By default the global window object will be used.\n   */\n  window?: Window;\n}\n\n/**\n * CMS integration layer.\n */\nexport interface Cms {\n  /**\n   * Initializes integration with the CMS.\n   * @param options The CMS integration options.\n   */\n  initialize(options: CmsOptions): void;\n}\n\ninterface CmsProcedures extends Procedures {\n  sync(): void;\n}\n\ninterface CmsEvents {\n  update: CmsUpdateEvent;\n}\n\ntype SpaProcedures = Procedures;\n\ninterface SpaEvents {\n  ready: never;\n}\n\n@injectable()\nexport class CmsImpl implements Cms {\n  private window?: Window;\n\n  constructor(\n    @inject(RpcClientService) protected rpcClient: RpcClient<CmsProcedures, CmsEvents>,\n    @inject(RpcServerService) protected rpcServer: RpcServer<SpaProcedures, SpaEvents>,\n    @inject(CmsEventBusService) @optional() protected cmsEventBus?: CmsEventBus,\n    @inject(Logger) @optional() private logger?: Logger,\n  ) {\n    this.onStateChange = this.onStateChange.bind(this);\n    this.cmsEventBus?.on('page.ready', this.onPageReady.bind(this));\n    this.rpcClient.on('update', this.onUpdate.bind(this));\n    this.rpcServer.register('inject', this.inject.bind(this));\n  }\n\n  initialize({ window = GLOBAL_WINDOW }: CmsOptions): void {\n    if (this.window === window) {\n      return;\n    }\n\n    this.window = window;\n\n    if (this.window?.document?.readyState !== 'loading') {\n      this.onInitialize();\n\n      return;\n    }\n\n    this.window?.document?.addEventListener('readystatechange', this.onStateChange);\n  }\n\n  private onInitialize(): void {\n    this.logger?.debug('The page is ready to accept incoming messages.');\n\n    this.rpcServer.trigger('ready', undefined as never);\n  }\n\n  private onStateChange(): void {\n    if (this.window!.document!.readyState === 'loading') {\n      return;\n    }\n\n    this.onInitialize();\n    this.window!.document!.removeEventListener('readystatechange', this.onStateChange);\n  }\n\n  protected onPageReady(): void {\n    this.logger?.debug('Synchronizing the page.');\n\n    this.rpcClient.call('sync');\n  }\n\n  protected onUpdate(event: CmsUpdateEvent): void {\n    this.logger?.debug('Received update event.');\n    this.logger?.debug('Event:', event);\n\n    this.cmsEventBus?.emit('cms.update', event);\n  }\n\n  protected inject(resource: string): Promise<void> {\n    if (!this.window?.document) {\n      return Promise.reject(new Error('SPA document is not ready.'));\n    }\n\n    this.logger?.debug('Received request to inject a resource.');\n    this.logger?.debug('Resource:', resource);\n\n    return new Promise<void>((resolve, reject) => {\n      const script = this.window!.document.createElement('script');\n\n      script.type = 'text/javascript';\n      script.src = resource;\n      script.addEventListener('load', () => resolve());\n      script.addEventListener('error', () => reject(new Error(`Failed to load resource '${resource}'.`)));\n      this.window!.document.body.appendChild(script);\n    });\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable, optional } from 'inversify';\nimport { Logger } from '../logger';\nimport { Cms, CmsOptions } from './cms';\nimport { CmsEventBus, CmsEventBusService } from './cms-events';\n\nconst GLOBAL_WINDOW = typeof window === 'undefined' ? undefined : window;\n\ninterface CmsApi {\n  sync(): void;\n}\n\ninterface SpaApi {\n  init(api: CmsApi): void;\n\n  renderComponent(id: string, properties: Record<string, unknown>): void;\n}\n\ndeclare global {\n  interface Window {\n    SPA?: SpaApi;\n  }\n}\n\n@injectable()\nexport class Cms14Impl implements Cms {\n  private api?: CmsApi;\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private postponed: Function[] = [];\n\n  constructor(\n    @inject(CmsEventBusService) @optional() protected eventBus?: CmsEventBus,\n    @inject(Logger) @optional() private logger?: Logger,\n  ) {}\n\n  private async flush(): Promise<void> {\n    this.postponed.splice(0).forEach((task) => task());\n  }\n\n  private postpone<T extends(...args: any[]) => any>(task: T) {\n    return (...args: Parameters<T>) => {\n      if (this.api) {\n        return task.apply(this, args);\n      }\n\n      this.postponed.push(task.bind(this, ...args));\n\n      return undefined;\n    };\n  }\n\n  initialize({ window = GLOBAL_WINDOW }: CmsOptions): void {\n    if (this.api || !window || window.SPA) {\n      return;\n    }\n\n    this.logger?.debug('Initiating a handshake with the Experience Manager.');\n    this.eventBus?.on('page.ready', this.postpone(this.sync));\n\n    window.SPA = {\n      init: this.onInit.bind(this),\n      renderComponent: this.onRenderComponent.bind(this),\n    };\n  }\n\n  protected onInit(api: CmsApi): void {\n    this.logger?.debug('Completed the handshake with the Experience Manager.');\n\n    this.api = api;\n    this.flush();\n  }\n\n  protected onRenderComponent(id: string, properties: Record<string, unknown>): void {\n    this.logger?.debug('Received component rendering request.');\n    this.logger?.debug('Component:', id);\n    this.logger?.debug('Properties', properties);\n\n    this.eventBus?.emit('cms.update', { id, properties });\n  }\n\n  protected sync(): void {\n    this.logger?.debug('Synchronizing the page.');\n\n    this.api!.sync();\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface Url {\n  hash: string;\n  origin: string;\n  pathname: string;\n  search: string;\n  searchParams: URLSearchParams;\n  path: string;\n}\n\nexport function parseUrl(url: string): Url {\n  // Since the incoming url might be just a string or relative path we should provide a dummy base URL\n  // to be able to resolve relative URLs.\n  // The dummy URL have to be unique to avoid any intersection with a real URL\n  // because we are using the origin property from parsed URL object.\n  // we are using example.com as it is a domain which cannot be registered by anyone (like a malicious user)\n  const DUMMY_BASE_URL = 'http://example.com';\n  const parsedUrl = new URL(url, DUMMY_BASE_URL);\n  const { hash, search, searchParams } = parsedUrl;\n\n  let { origin, pathname } = parsedUrl;\n\n  // If url is a string or relative path, like 'someurl', '/news', etc we should return origin as an empty string.\n  origin = origin !== DUMMY_BASE_URL ? origin : '';\n\n  // For urls without protocol like //example.com?query#hash we should omit protocol from origin as well\n  if (url.startsWith('//')) {\n    origin = origin.replace(parsedUrl.protocol, '');\n  }\n\n  // For urls like `//example.com?query#hash` pathname should be empty string ''.\n  if (url.startsWith(origin) && !url.replace(origin, '').startsWith('/') && pathname.startsWith('/')) {\n    pathname = pathname.substring(1);\n  }\n\n  return { hash, origin, pathname, search, searchParams, path: `${pathname}${search}${hash}` };\n}\n\nexport function buildUrl(url: Partial<Url>): string {\n  const searchParams = url.searchParams?.toString() ?? '';\n  const search = url.search ?? `${searchParams && `?${searchParams}`}`;\n  const path = url.path ?? `${url.pathname ?? ''}${search}${url.hash ?? ''}`;\n\n  return `${url.origin ?? ''}${path}`;\n}\n\nexport function mergeSearchParams(params: URLSearchParams, ...rest: URLSearchParams[]): URLSearchParams {\n  const result = new URLSearchParams(params);\n  rest.forEach((restParams) => restParams.forEach((value, key) => result.set(key, value)));\n\n  return result;\n}\n\nexport function appendSearchParams(url: string, params: URLSearchParams): string {\n  const { hash, origin, pathname, searchParams } = parseUrl(url);\n\n  return buildUrl({ hash, origin, pathname, searchParams: mergeSearchParams(searchParams, params) });\n}\n\n/**\n * Extracts query parameters from URL and returns URL object that contains URL path and extracted parameters\n *\n * @param url The URL of the page.\n * @param params Parameters to extract.\n */\nexport function extractSearchParams(\n  url: string,\n  params: string[],\n): {\n  searchParams: URLSearchParams;\n  url: string;\n} {\n  const { hash, origin, pathname, searchParams } = parseUrl(url);\n  const extracted = new URLSearchParams();\n\n  params.forEach((param) => {\n    if (searchParams.has(param)) {\n      extracted.set(param, searchParams.get(param)!);\n      searchParams.delete(param);\n    }\n  });\n\n  return {\n    searchParams: extracted,\n    url: buildUrl({ hash, origin, pathname, searchParams }),\n  };\n}\n\nexport function isAbsoluteUrl(url: string): boolean {\n  const { origin, pathname } = parseUrl(url);\n\n  return !!origin || pathname.startsWith('/');\n}\n\nfunction isMatchedOrigin(origin: string, baseOrigin: string): boolean {\n  const [schema, host = ''] = origin.split('//', 2);\n  const [baseSchema, baseHost = ''] = baseOrigin.split('//', 2);\n\n  return !baseOrigin || !origin || ((!schema || !baseSchema || schema === baseSchema) && baseHost === host);\n}\n\nfunction isMatchedPathname(pathname: string, basePathname: string): boolean {\n  return !basePathname || pathname.startsWith(basePathname);\n}\n\nfunction isMatchedQuery(search: URLSearchParams, baseSearch: URLSearchParams): boolean {\n  let match = true;\n  baseSearch.forEach((value, key) => {\n    match = match && ((!value && search.has(key)) || search.getAll(key).includes(value));\n  });\n\n  return match;\n}\n\nexport function isMatched(link: string, base = ''): boolean {\n  const linkUrl = parseUrl(link);\n  const baseUrl = parseUrl(base);\n\n  return (\n    isMatchedOrigin(linkUrl.origin, baseUrl.origin)\n    && isMatchedPathname(linkUrl.pathname, baseUrl.pathname)\n    && isMatchedQuery(linkUrl.searchParams, baseUrl.searchParams)\n  );\n}\n\nexport function resolveUrl(url: string, base: string): string {\n  const baseUrl = parseUrl(base);\n  const sourceUrl = parseUrl(url);\n  const pathname = sourceUrl.pathname.startsWith('/')\n    ? sourceUrl.pathname\n    : `${baseUrl.pathname}${baseUrl.pathname.endsWith('/') || !sourceUrl.pathname ? '' : '/'}${sourceUrl.pathname}`;\n\n  return buildUrl({\n    pathname,\n    hash: sourceUrl.hash || baseUrl.hash,\n    origin: sourceUrl.origin || baseUrl.origin,\n    searchParams: mergeSearchParams(baseUrl.searchParams, sourceUrl.searchParams),\n  });\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable } from 'inversify';\nimport { buildUrl, mergeSearchParams, parseUrl } from './utils';\n\nexport const UrlBuilderOptionsToken = Symbol.for('UrlBuilderOptionsToken');\nexport const UrlBuilderService = Symbol.for('UrlBuilderService');\n\n/**\n * Mapping of the incoming HTTP request path to the URL of the page model API.\n */\nexport interface UrlBuilderOptions {\n  /**\n   * Base URL to fetch the page model from.\n   */\n  endpoint?: string;\n\n  /**\n   * Base URL of the SPA. Everything after it will be interpreted as a route into the page model.\n   * The default base url is an empty string.\n   */\n  baseUrl?: string;\n}\n\nexport interface UrlBuilder {\n  /**\n   * @param path Source path to generate the Page Model API URL.\n   * @returns The Page Model API URL.\n   */\n  getApiUrl(path: string): string;\n\n  /**\n   * @param path Source path to generate an SPA URL.\n   * @return The SPA URL for the channel path from the source path.\n   */\n  getSpaUrl(path: string): string;\n}\n\n@injectable()\nexport class UrlBuilderImpl {\n  private endpoint: ReturnType<typeof parseUrl>;\n\n  private baseUrl: ReturnType<typeof parseUrl>;\n\n  constructor(@inject(UrlBuilderOptionsToken) options: UrlBuilderOptions) {\n    this.endpoint = parseUrl(options.endpoint ?? '');\n    this.baseUrl = parseUrl(options.baseUrl ?? '');\n  }\n\n  getApiUrl(link: string): string {\n    const { pathname, searchParams } = parseUrl(link);\n\n    if (this.baseUrl.pathname && !pathname.startsWith(this.baseUrl.pathname)) {\n      throw new Error(`The path \"${pathname}\" does not start with the base path \"${this.baseUrl.pathname}\".`);\n    }\n\n    const route = pathname.substring(this.baseUrl.pathname.length);\n\n    return buildUrl({\n      origin: this.endpoint.origin,\n      pathname: `${this.endpoint.pathname}${route}`,\n      searchParams: mergeSearchParams(searchParams, this.endpoint.searchParams),\n    });\n  }\n\n  getSpaUrl(link: string): string {\n    const { hash, pathname, searchParams } = parseUrl(link);\n    const route = !pathname.startsWith('/') && !this.baseUrl.pathname ? `/${pathname}` : pathname;\n\n    return buildUrl({\n      origin: this.baseUrl.origin,\n      pathname: `${this.baseUrl.pathname}${route}`,\n      searchParams: mergeSearchParams(searchParams, this.baseUrl.searchParams),\n      hash: hash || this.baseUrl.hash,\n    });\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerModule } from 'inversify';\nimport { UrlBuilderImpl, UrlBuilderService } from './builder';\n\nexport function UrlModule(): ContainerModule {\n  return new ContainerModule((bind) => {\n    bind(UrlBuilderService).to(UrlBuilderImpl).inSingletonScope();\n  });\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable } from 'inversify';\nimport { UrlBuilderOptionsToken } from './builder';\nimport { buildUrl, mergeSearchParams, parseUrl } from './utils';\n\nconst DEFAULT_API_BASE_URL = '/resourceapi';\nconst DEFAULT_SPA_BASE_URL = '';\n\n/**\n * Mapping of the incoming HTTP request path to the URL of the page model API.\n */\nexport interface UrlBuilderOptions {\n  /**\n   * Base URL to fetch the page model from.\n   * The default URL is `cmsBaseUrl` + `/resourceapi`.\n   */\n  apiBaseUrl?: string;\n\n  /**\n   * Base URL of the CMS.\n   */\n  cmsBaseUrl?: string;\n\n  /**\n   * Base URL of the SPA. Everything after it will be interpreted as a route into the page model.\n   * The default base url is an empty string.\n   */\n  spaBaseUrl?: string;\n}\n\n@injectable()\nexport class UrlBuilderImpl {\n  private apiBaseUrl: ReturnType<typeof parseUrl>;\n\n  private cmsBaseUrl: ReturnType<typeof parseUrl>;\n\n  private spaBaseUrl: ReturnType<typeof parseUrl>;\n\n  constructor(@inject(UrlBuilderOptionsToken) options: UrlBuilderOptions) {\n    this.apiBaseUrl = parseUrl(options.apiBaseUrl ?? `${options.cmsBaseUrl ?? ''}${DEFAULT_API_BASE_URL}`);\n    this.cmsBaseUrl = parseUrl(options.cmsBaseUrl ?? '');\n    this.spaBaseUrl = parseUrl(options.spaBaseUrl ?? DEFAULT_SPA_BASE_URL);\n  }\n\n  getApiUrl(link: string): string {\n    const { pathname, searchParams } = parseUrl(link);\n\n    // TODO: Remove when HSTTWO-4728 is resolved\n    if (this.apiBaseUrl.pathname && pathname.startsWith(this.apiBaseUrl.pathname)) {\n      return buildUrl({\n        pathname,\n        origin: this.apiBaseUrl.origin,\n        searchParams: mergeSearchParams(this.apiBaseUrl.searchParams, searchParams),\n      });\n    }\n\n    if (this.spaBaseUrl.pathname && !pathname.startsWith(this.spaBaseUrl.pathname)) {\n      throw new Error(`The path \"${pathname}\" does not start with the base path \"${this.spaBaseUrl.pathname}\".`);\n    }\n\n    const route = pathname.substring(this.spaBaseUrl.pathname.length);\n\n    return buildUrl({\n      origin: this.apiBaseUrl.origin,\n      pathname: `${this.apiBaseUrl.pathname}${route}`,\n      searchParams: mergeSearchParams(searchParams, this.apiBaseUrl.searchParams),\n    });\n  }\n\n  getSpaUrl(link: string): string {\n    const { hash, pathname, searchParams } = parseUrl(link);\n    let route = pathname.startsWith(this.cmsBaseUrl.pathname)\n      ? pathname.substring(this.cmsBaseUrl.pathname.length)\n      : pathname;\n\n    if (!route.startsWith('/') && !this.spaBaseUrl.pathname) {\n      route = `/${route}`;\n    }\n\n    return buildUrl({\n      origin: this.spaBaseUrl.origin,\n      pathname: `${this.spaBaseUrl.pathname}${route}`,\n      searchParams: mergeSearchParams(searchParams, this.spaBaseUrl.searchParams),\n      hash: hash || this.spaBaseUrl.hash,\n    });\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerModule } from 'inversify';\nimport { UrlBuilderImpl } from './builder09';\nimport { UrlBuilderService } from './builder';\n\nexport function UrlModule(): ContainerModule {\n  return new ContainerModule((bind) => {\n    bind(UrlBuilderService).to(UrlBuilderImpl).inSingletonScope();\n  });\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable, inject, optional } from 'inversify';\nimport { isMatched } from '../url';\nimport { Events, Message, Procedures, Rpc } from './rpc';\nimport { Logger } from '../logger';\n\nexport const PostMessageService = Symbol.for('PostMessageService');\n\nconst GLOBAL_WINDOW = typeof window === 'undefined' ? undefined : window;\n\nexport interface PostMessageOptions {\n  /**\n   * The brXM origin to verify an integration with the Experience Manager.\n   * This option should be used when the brXM is accessible from a host other than the Page Model API.\n   * By default, the origin from the `apiBaseUrl` or `endpoint` parameters is used.\n   */\n  origin?: string;\n\n  /**\n   * The window reference for the CMS integration.\n   * By default the global window object will be used.\n   */\n  window?: Window;\n}\n\n@injectable()\nexport class PostMessage<\n  TRemoteProcedures extends Procedures = Procedures,\n  TRemoteEvents extends Events = Events,\n  TProcedures extends Procedures = Procedures,\n  TEvents extends Events = Events,\n> extends Rpc<TRemoteProcedures, TRemoteEvents, TProcedures, TEvents> {\n  private origin?: string;\n\n  private window?: Window;\n\n  constructor(@inject(Logger) @optional() private logger?: Logger) {\n    super();\n    this.onMessage = this.onMessage.bind(this);\n  }\n\n  initialize({ origin, window = GLOBAL_WINDOW }: PostMessageOptions): void {\n    this.window?.removeEventListener('message', this.onMessage, false);\n    this.origin = origin;\n    this.window = window;\n    this.window?.addEventListener('message', this.onMessage, false);\n  }\n\n  protected send(message: Message): void {\n    if (!this.origin) {\n      return;\n    }\n\n    this.logger?.debug('[OUTGOING]', `[${this.origin}]`, message);\n    this.window?.parent?.postMessage(message, this.origin);\n  }\n\n  private onMessage(event: MessageEvent): void {\n    if (!event.data || !isMatched(event.origin, this.origin === '*' ? '' : this.origin)) {\n      return;\n    }\n\n    if (event.data?.type) {\n      this.logger?.debug('[INCOMING]', `[${event.origin}]`, event.data);\n    }\n\n    this.process(event.data);\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerModule } from 'inversify';\nimport { Typed } from 'emittery';\nimport { CmsImpl, CmsService } from './cms';\nimport { Cms14Impl } from './cms14';\nimport { CmsEventBusService } from './cms-events';\nimport { PostMessageService, PostMessage } from './post-message';\nimport { RpcClientService, RpcServerService } from './rpc';\n\nexport function CmsModule(): ContainerModule {\n  return new ContainerModule((bind) => {\n    bind(CmsEventBusService)\n      .toDynamicValue(() => new Typed())\n      .inSingletonScope()\n      .when(() => typeof window !== 'undefined');\n    bind(PostMessageService).to(PostMessage).inSingletonScope();\n    bind(RpcClientService).toService(PostMessageService);\n    bind(RpcServerService).toService(PostMessageService);\n    bind(CmsService).to(CmsImpl).inSingletonScope().whenTargetIsDefault();\n    bind(CmsService).to(Cms14Impl).inSingletonScope().whenTargetNamed('cms14');\n  });\n}\n\nexport { CmsOptions, CmsService, Cms } from './cms';\nexport { CmsUpdateEvent, CmsEventBusService, CmsEventBus } from './cms-events';\nexport { PostMessageOptions, PostMessageService, PostMessage } from './post-message';\nexport { RpcClientService, RpcClient, RpcServerService, RpcServer } from './rpc';\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ApiOptions } from './spa';\nimport { CmsOptions, PostMessageOptions } from './cms';\nimport { UrlBuilderOptions09, UrlBuilderOptions } from './url';\n\n/**\n * Configuration options for configuring behavior of the SDK.\n */\nexport interface SDKOptions {\n  /**\n   * The NBRMode parameter used to indicate whether the children of the BrPage component should be rendered\n   * immediatly or wait with rendering until the Page model has been retrieved and parsed.\n   * By default, the option is `false`.\n   */\n  NBRMode?: boolean;\n}\n\n/**\n * Configuration options for generating the page model URL.\n */\nexport interface UrlOptions {\n  /**\n   * URL mapping for the live page model.\n   */\n  live: UrlBuilderOptions09;\n\n  /**\n   * URL mapping for the preview page model.\n   */\n  preview: UrlBuilderOptions09;\n}\n\n/**\n * Configuration of the SPA SDK using reverse proxy-based setup.\n */\nexport interface ConfigurationWithProxy extends ApiOptions, CmsOptions, SDKOptions {\n  /**\n   * Options for generating the page model API URL.\n   */\n  options: UrlOptions;\n\n  /**\n   * The path part of the URL, including a query string if present.\n   * For example: '/path/to/page?foo=1'. The path always starts with '/'.\n   */\n  path?: string;\n\n  /**\n   * The option enabling debug mode.\n   */\n  debug?: boolean;\n}\n\n/**\n * Configuration of the SPA SDK using the JWT token-based setup.\n */\nexport interface ConfigurationWithJwt extends ApiOptions, CmsOptions, PostMessageOptions, SDKOptions {\n  /**\n   * The query string parameter used to pass authorization header value.\n   * By default, `token` parameter is used.\n   */\n  authorizationQueryParameter?: string;\n\n  /**\n   * The query string parameter used to pass a cluster node identifier.\n   * By default, `server-id` parameter is used.\n   */\n  serverIdQueryParameter?: string;\n\n  /**\n   * The path part of the URL, including a query string if present.\n   * For example: '/path/to/page?foo=1'. The path always starts with '/'.\n   */\n  path?: string;\n\n  /**\n   * The option enabling debug mode.\n   */\n  debug?: boolean;\n}\n\n/**\n * Configuration of the SPA SDK using the JWT token-based setup and the Page Model API v0.9.\n */\nexport interface ConfigurationWithJwt09 extends ConfigurationWithJwt, UrlBuilderOptions09 {}\n\n/**\n * Configuration of the SPA SDK using the JWT token-based setup and the Page Model API v1.0.\n */\nexport interface ConfigurationWithJwt10 extends ConfigurationWithJwt, UrlBuilderOptions {}\n\n/**\n * Configuration of the SPA SDK.\n */\nexport type Configuration = ConfigurationWithProxy | ConfigurationWithJwt09 | ConfigurationWithJwt10;\n\nexport function isConfigurationWithProxy(value: any): value is ConfigurationWithProxy {\n  return !!(value?.options?.live && value?.options?.preview);\n}\n\nexport function isConfigurationWithJwt09(value: any): value is ConfigurationWithJwt09 {\n  return !!value?.cmsBaseUrl;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Link to a page outside the current application.\n */\nexport const TYPE_LINK_EXTERNAL = 'external';\n\n/**\n * Link to a page inside the current application.\n */\nexport const TYPE_LINK_INTERNAL = 'internal';\n\n/**\n * Link to a CMS resource.\n */\nexport const TYPE_LINK_RESOURCE = 'resource';\n\n/**\n * Unresolved link.\n */\nexport const TYPE_LINK_UNKNOWN = 'unknown';\n\nexport type LinkType =\n  | typeof TYPE_LINK_EXTERNAL\n  | typeof TYPE_LINK_INTERNAL\n  | typeof TYPE_LINK_RESOURCE\n  | typeof TYPE_LINK_UNKNOWN;\n\n/**\n * A link to a resource or a page.\n */\nexport interface Link {\n  href?: string;\n  type?: LinkType;\n}\n\n/**\n * Checks whether a value is a link.\n * @param value The value to check.\n */\nexport function isLink(value: any): value is Link {\n  return (\n    !!value\n    && (Object.prototype.hasOwnProperty.call(value, 'href')\n      || (Object.prototype.hasOwnProperty.call(value, 'type')\n        && [TYPE_LINK_EXTERNAL, TYPE_LINK_INTERNAL, TYPE_LINK_RESOURCE, TYPE_LINK_UNKNOWN].includes(value.type)))\n  );\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type Builder<T extends any[], U> = (...args: T) => U;\n\nexport interface Factory<T extends any[], U> {\n  /**\n   * Creates an instance from the given arguments.\n   */\n  create(...args: T): U;\n}\n\nexport abstract class SimpleFactory<T, U extends Builder<any, any>> implements Factory<any, any> {\n  protected mapping = new Map<T, U>();\n\n  /**\n   * Registers a builder for the specified type.\n   * @param type The entity type.\n   * @param builder The entity builder.\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  register(type: T, builder: U) {\n    this.mapping.set(type, builder);\n\n    return this;\n  }\n\n  abstract create(...args: any[]): any;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable } from 'inversify';\nimport { LinkType, Link, TYPE_LINK_INTERNAL, isLink } from './link';\nimport { SimpleFactory } from './factory';\n\ntype LinkBuilder = (link: string) => string;\n\n@injectable()\nexport class LinkFactory extends SimpleFactory<LinkType, LinkBuilder> {\n  create(link: Link): string | undefined;\n\n  create(path: string): string;\n\n  create(link: Link | string): string | undefined {\n    if (isLink(link)) {\n      return this.createLink(link);\n    }\n\n    return this.createPath(link);\n  }\n\n  private createLink(link: Link): string | undefined {\n    if (!link.type || typeof link.href === 'undefined' || !this.mapping.has(link.type)) {\n      return link.href;\n    }\n\n    const builder = this.mapping.get(link.type)!;\n\n    return builder(link.href);\n  }\n\n  private createPath(path: string): string | undefined {\n    return this.createLink({ href: path, type: TYPE_LINK_INTERNAL });\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Builder } from './factory';\nimport { MetaCollectionModel, MetaCollection } from './meta-collection';\n\nexport const MetaCollectionFactory = Symbol.for('MetaCollectionFactory');\n\nexport type MetaCollectionFactory = Builder<[MetaCollectionModel], MetaCollection>;\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable } from 'inversify';\nimport { LinkFactory } from './link-factory';\nimport { Link } from './link';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { MetaCollectionModel, MetaCollection } from './meta-collection';\nimport { Reference } from './reference';\n\nexport const ComponentChildrenToken = Symbol.for('ComponentChildrenToken');\nexport const ComponentModelToken = Symbol.for('ComponentModelToken');\n\n/**\n * Generic component type.\n */\nexport const TYPE_COMPONENT = 'component';\n\n/**\n * Container type.\n */\nexport const TYPE_COMPONENT_CONTAINER = 'container';\n\n/**\n * Container item type.\n */\nexport const TYPE_COMPONENT_CONTAINER_ITEM = 'container-item';\n\n/**\n * Container item content type.\n */\nexport const TYPE_COMPONENT_CONTAINER_ITEM_CONTENT = 'componentcontent';\n\nexport type ComponentType =\n  | typeof TYPE_COMPONENT\n  | typeof TYPE_COMPONENT_CONTAINER_ITEM\n  | typeof TYPE_COMPONENT_CONTAINER;\n\ntype ComponentLinks = 'self';\n\ntype ComponentModels = Record<string, any>;\n\ntype ComponentParameters = Record<string, any>;\n\ntype ComponentProperties = ComponentParameters;\n\n/**\n * Meta-data of a component.\n */\nexport interface ComponentMeta extends MetaCollectionModel {\n  params?: ComponentParameters;\n}\n\n/**\n * Model of a component.\n */\nexport interface ComponentModel {\n  children?: Reference[];\n  id: string;\n  links: Record<ComponentLinks, Link>;\n  meta: ComponentMeta;\n  models?: ComponentModels;\n  name?: string;\n  type: ComponentType;\n}\n\n/**\n * A component in the current page.\n */\nexport interface Component {\n  /**\n   * @return The component id.\n   */\n  getId(): string;\n\n  /**\n   * @return The component meta-data collection.\n   */\n  getMeta(): MetaCollection;\n\n  /**\n   * @return The map of the component models.\n   */\n  getModels<T extends ComponentModels>(): T;\n\n  /**\n   * @return The link to the partial component model.\n   */\n  getUrl(): string | undefined;\n\n  /**\n   * @return The name of the component.\n   */\n  getName(): string;\n\n  /**\n   * @return The parameters of the component.\n   */\n  getParameters<T = ComponentParameters>(): T;\n\n  /**\n   * @return The properties of the component.\n   * @alias getParameters\n   */\n  getProperties<T = ComponentProperties>(): T;\n\n  /**\n   * @return The direct children of the component.\n   */\n  getChildren(): Component[];\n\n  /**\n   * Looks up for a nested component.\n   * @param componentNames A lookup path.\n   */\n  getComponent<U extends Component>(...componentNames: string[]): U | undefined;\n  getComponent(): this;\n\n  /**\n   * Looks up for a nested component by its id.\n   * @param id A component id.\n   */\n  getComponentById<U extends Component>(id: string): U | this | undefined;\n}\n\n@injectable()\nexport class ComponentImpl implements Component {\n  protected meta: MetaCollection;\n\n  constructor(\n    @inject(ComponentModelToken) protected model: ComponentModel,\n    @inject(ComponentChildrenToken) protected children: Component[],\n    @inject(LinkFactory) private linkFactory: LinkFactory,\n    @inject(MetaCollectionFactory) metaFactory: MetaCollectionFactory,\n  ) {\n    this.meta = metaFactory(this.model.meta);\n  }\n\n  getId(): string {\n    return this.model.id;\n  }\n\n  getMeta(): MetaCollection {\n    return this.meta;\n  }\n\n  getModels<T extends ComponentModels>(): T;\n\n  getModels(): Record<string, unknown> {\n    return this.model.models || {};\n  }\n\n  getUrl(): string | undefined {\n    return this.linkFactory.create(this.model.links.self);\n  }\n\n  getName(): string {\n    return this.model.name || '';\n  }\n\n  getParameters<T>(): T {\n    return (this.model.meta.params ?? {}) as T;\n  }\n\n  getProperties<T>(): T {\n    return this.getParameters<T>();\n  }\n\n  getChildren(): Component[] {\n    return this.children;\n  }\n\n  getComponent(): this;\n\n  getComponent<U extends Component>(...componentNames: string[]): U | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  getComponent(...componentNames: string[]) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let component: Component | undefined = this;\n\n    while (componentNames.length && component) {\n      const name = componentNames.shift()!;\n      component = component.getChildren().find((childComponent) => childComponent.getName() === name);\n    }\n\n    return component;\n  }\n\n  getComponentById<U extends Component>(id: string): U | this | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  getComponentById(id: string) {\n    const queue = [this as Component];\n\n    while (queue.length) {\n      const component = queue.shift()!;\n\n      if (component.getId() === id) {\n        return component;\n      }\n\n      queue.push(...component.getChildren());\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * Checks whether a value is a page component.\n * @param value The value to check.\n */\nexport function isComponent(value: any): value is Component {\n  return value instanceof ComponentImpl;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable } from 'inversify';\nimport { ComponentChildrenToken, ComponentModelToken, ComponentMeta, Component } from './component';\nimport { Link } from './link';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { MetaCollection } from './meta-collection';\nimport { UrlBuilderService, UrlBuilder } from '../url';\n\n/**\n * Generic component type.\n */\nexport const TYPE_COMPONENT = 'COMPONENT';\n\n/**\n * Container item type.\n */\nexport const TYPE_COMPONENT_CONTAINER_ITEM = 'CONTAINER_ITEM_COMPONENT';\n\n/**\n * Container type.\n */\nexport const TYPE_COMPONENT_CONTAINER = 'CONTAINER_COMPONENT';\n\nexport type ComponentType =\n  | typeof TYPE_COMPONENT\n  | typeof TYPE_COMPONENT_CONTAINER_ITEM\n  | typeof TYPE_COMPONENT_CONTAINER;\n\ntype ComponentLinks = 'componentRendering';\n\ntype ComponentModels = Record<string, any>;\n\n/**\n * Model of a component.\n */\nexport interface ComponentModel {\n  _links: Record<ComponentLinks, Link>;\n  _meta: ComponentMeta;\n  id: string;\n  models?: ComponentModels;\n  name?: string;\n  type: ComponentType;\n  components?: ComponentModel[];\n}\n\n@injectable()\nexport class ComponentImpl implements Component {\n  protected meta: MetaCollection;\n\n  constructor(\n    @inject(ComponentModelToken) protected model: ComponentModel,\n    @inject(ComponentChildrenToken) protected children: Component[],\n    @inject(MetaCollectionFactory) metaFactory: MetaCollectionFactory,\n    @inject(UrlBuilderService) private urlBuilder: UrlBuilder,\n  ) {\n    this.meta = metaFactory(this.model._meta);\n  }\n\n  getId(): string {\n    return this.model.id;\n  }\n\n  getMeta(): MetaCollection {\n    return this.meta;\n  }\n\n  getModels<T extends ComponentModels>(): T;\n\n  getModels(): Record<string, unknown> {\n    return this.model.models || {};\n  }\n\n  getUrl(): string {\n    return this.urlBuilder.getApiUrl(this.model._links.componentRendering.href!);\n  }\n\n  getName(): string {\n    return this.model.name || '';\n  }\n\n  getParameters<T>(): T {\n    return (this.model._meta.params ?? {}) as T;\n  }\n\n  getProperties<T>(): T {\n    return this.getParameters<T>();\n  }\n\n  getChildren(): Component[] {\n    return this.children;\n  }\n\n  getComponent(): this;\n\n  getComponent<U extends Component>(...componentNames: string[]): U | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  getComponent(...componentNames: string[]) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let component: Component | undefined = this;\n\n    while (componentNames.length && component) {\n      const name = componentNames.shift()!;\n      component = component.getChildren().find((childComponent) => childComponent.getName() === name);\n    }\n\n    return component;\n  }\n\n  getComponentById<U extends Component>(id: string): U | this | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  getComponentById(id: string) {\n    const queue = [this as Component];\n\n    while (queue.length) {\n      const component = queue.shift()!;\n\n      if (component.getId() === id) {\n        return component;\n      }\n\n      queue.push(...component.getChildren());\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * Checks whether a value is a page component.\n * @param value The value to check.\n */\nexport function isComponent(value: any): value is Component {\n  return value instanceof ComponentImpl;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable } from 'inversify';\nimport { ComponentImpl, ComponentModel, Component, TYPE_COMPONENT_CONTAINER } from './component';\nimport { ContainerItem } from './container-item';\n\n/**\n * A blocked container with blocked items.\n */\nexport const TYPE_CONTAINER_BOX = 'hst.vbox';\n\n/**\n * An unordered list container.\n */\nexport const TYPE_CONTAINER_UNORDERED_LIST = 'hst.unorderedlist';\n\n/**\n * An ordered list container.\n */\nexport const TYPE_CONTAINER_ORDERED_LIST = 'hst.orderedlist';\n\n/**\n * A blocked container with inline items.\n */\nexport const TYPE_CONTAINER_INLINE = 'hst.span';\n\n/**\n * A container without surrounding markup.\n */\nexport const TYPE_CONTAINER_NO_MARKUP = 'hst.nomarkup';\n\n/**\n * Container Type.\n * @see https://documentation.bloomreach.com/library/concepts/template-composer/channel-editor-containers.html\n */\nexport type ContainerType =\n  | typeof TYPE_CONTAINER_BOX\n  | typeof TYPE_CONTAINER_UNORDERED_LIST\n  | typeof TYPE_CONTAINER_ORDERED_LIST\n  | typeof TYPE_CONTAINER_INLINE\n  | typeof TYPE_CONTAINER_NO_MARKUP;\n\n/**\n * Model of a container item.\n */\nexport interface ContainerModel extends ComponentModel {\n  type: typeof TYPE_COMPONENT_CONTAINER;\n  xtype?: ContainerType;\n}\n\n/**\n * A component that holds an ordered list of container item components.\n */\nexport interface Container extends Component {\n  /**\n   * Returns the type of a container.\n   *\n   * @see https://documentation.bloomreach.com/library/concepts/template-composer/channel-editor-containers.html\n   * @return The type of a container (e.g. `TYPE_CONTAINER_BOX`).\n   */\n  getType(): ContainerType | undefined;\n\n  /**\n   * @return The children of a container.\n   */\n  getChildren(): ContainerItem[];\n}\n\n@injectable()\nexport class ContainerImpl extends ComponentImpl implements Container {\n  protected model!: ContainerModel;\n\n  protected children!: ContainerItem[];\n\n  getChildren(): ContainerItem[] {\n    return this.children;\n  }\n\n  getType(): ContainerType {\n    return this.model.xtype?.toLowerCase() as ContainerType;\n  }\n}\n\n/**\n * Checks whether a value is a page container.\n * @param value The value to check.\n */\nexport function isContainer(value: any): value is Container {\n  return value instanceof ContainerImpl;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable } from 'inversify';\nimport { ComponentImpl, ComponentModel, TYPE_COMPONENT_CONTAINER } from './component09';\nimport { ContainerItem } from './container-item';\nimport { ContainerType, Container } from './container';\n\n/**\n * Model of a container item.\n */\nexport interface ContainerModel extends ComponentModel {\n  type: typeof TYPE_COMPONENT_CONTAINER;\n  xtype?: ContainerType;\n}\n\n@injectable()\nexport class ContainerImpl extends ComponentImpl implements Container {\n  protected model!: ContainerModel;\n\n  protected children!: ContainerItem[];\n\n  getChildren(): ContainerItem[] {\n    return this.children;\n  }\n\n  getType(): ContainerType {\n    return this.model.xtype?.toLowerCase() as ContainerType;\n  }\n}\n\n/**\n * Checks whether a value is a page container.\n * @param value The value to check.\n */\nexport function isContainer(value: any): value is Container {\n  return value instanceof ContainerImpl;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Typed } from 'emittery';\nimport { PageModel } from './page';\n\nexport const PageEventBusService = Symbol('PageEventBusService');\n\n/**\n * Page model update event.\n */\nexport interface PageUpdateEvent {\n  /**\n   * Updated part of the page model.\n   */\n  page: PageModel;\n}\n\nexport interface PageEvents {\n  'page.update': PageUpdateEvent;\n}\n\nexport type PageEventBus = Typed<PageEvents>;\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A reference to an entity within the page model.\n */\nexport interface Reference {\n  $ref: string;\n}\n\n/**\n * Checks whether a value is a reference.\n * @param value The value to check.\n */\nexport function isReference(value: any): value is Reference {\n  return !!value?.$ref;\n}\n\nexport function resolve<T>(object: Record<string, any>, reference: Reference): T | undefined {\n  return reference.$ref.split('/').reduce((value, key) => (key ? value?.[key] : object), object) as T;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable, optional } from 'inversify';\nimport {\n  ComponentImpl,\n  ComponentMeta,\n  ComponentModel,\n  ComponentModelToken,\n  Component,\n  TYPE_COMPONENT_CONTAINER_ITEM,\n  TYPE_COMPONENT_CONTAINER_ITEM_CONTENT,\n} from './component';\nimport { EmitterMixin, Emitter } from '../emitter';\nimport { PageEventBusService, PageEventBus, PageUpdateEvent } from './page-events';\nimport { LinkFactory } from './link-factory';\nimport { Logger } from '../logger';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { Page, PageModel } from './page';\nimport { Reference, resolve } from './reference';\n\n/**\n * A container item without mapping.\n */\nexport const TYPE_CONTAINER_ITEM_UNDEFINED: symbol = Symbol.for('ContainerItemUndefined');\n\ninterface ContainerItemParameters {\n  [parameter: string]: string | undefined;\n}\n\n/**\n * Meta-data of a container item.\n */\nexport interface ContainerItemMeta extends ComponentMeta {\n  hidden?: boolean;\n  params?: ContainerItemParameters;\n  paramsInfo?: ComponentMeta['params'];\n}\n\n/**\n * Model of a container item.\n */\nexport interface ContainerItemModel extends ComponentModel {\n  content?: Reference;\n  ctype?: string;\n  label?: string;\n  meta: ContainerItemMeta;\n  type: typeof TYPE_COMPONENT_CONTAINER_ITEM;\n}\n\n/**\n * Content model of a container item\n */\nexport interface ContainerItemContent<T> {\n  type: string;\n  data: T;\n}\n\n/**\n * Container item update event.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ContainerItemUpdateEvent {}\n\nexport interface ContainerItemEvents {\n  update: ContainerItemUpdateEvent;\n}\n\n/**\n * A component that can be configured in the UI.\n */\nexport interface ContainerItem extends Component, Emitter<ContainerItemEvents> {\n  /**\n   * Returns the label of a container item catalogue component.\n   *\n   * @return The label of a catalogue component (e.g. \"News List\").\n   */\n  getLabel(): string | undefined;\n\n  /**\n   * Returns the type of a container item. The available types depend on which\n   * container items have been configured in the backend.\n   *\n   * @return The type of a container item (e.g. \"Banner\").\n   */\n  getType(): string | undefined;\n\n  /**\n   * Returns whether the component should not render anything.\n   * Hiding components is only possible with the Relevance feature.\n   *\n   * @return Whether the component is hidden or not.\n   */\n  isHidden(): boolean;\n\n  /**\n   * Returns the content of this component.\n   *\n   * @param page The page that contains the content\n   */\n  getContent<T>(page: Page): T | null;\n\n  /**\n   * Returns a [RFC-6901](https://tools.ietf.org/html/rfc6901) JSON Pointer\n   * to the content of this container item.\n   */\n  getContentReference(): Reference | undefined;\n}\n\n/**\n * Returns the content of this component.\n *\n * @param component The component that references the content\n * @param page The page that contains the content\n */\nexport function getContainerItemContent<T>(component: ContainerItem, page: Page): T | null {\n  const contentRef = component.getContentReference();\n  if (!contentRef) {\n    return null;\n  }\n\n  const componentContent = page.getContent<ContainerItemContent<T>>(contentRef);\n  if (!componentContent) {\n    return null;\n  }\n\n  if (componentContent?.type !== TYPE_COMPONENT_CONTAINER_ITEM_CONTENT) {\n    return null;\n  }\n\n  return componentContent.data;\n}\n\n@injectable()\nexport class ContainerItemImpl\n  extends EmitterMixin<typeof ComponentImpl, ContainerItemEvents>(ComponentImpl)\n  implements ContainerItem {\n  constructor(\n    @inject(ComponentModelToken) protected model: ContainerItemModel,\n    @inject(LinkFactory) linkFactory: LinkFactory,\n    @inject(MetaCollectionFactory) private metaFactory: MetaCollectionFactory,\n    @inject(PageEventBusService) @optional() eventBus?: PageEventBus,\n    @inject(Logger) @optional() private logger?: Logger,\n  ) {\n    super(model, [], linkFactory, metaFactory);\n\n    eventBus?.on('page.update', this.onPageUpdate.bind(this));\n  }\n\n  protected onPageUpdate(event: PageUpdateEvent): void {\n    const page = event.page as PageModel;\n    const model = resolve<ContainerItemModel>(page, page.root);\n    if (model?.id !== this.getId()) {\n      return;\n    }\n\n    this.logger?.debug('Received container item update event.');\n    this.logger?.debug('Event:', event);\n\n    this.model = model;\n    this.meta = this.metaFactory(model.meta);\n    this.emit('update', {});\n  }\n\n  getLabel(): string | undefined {\n    return this.model.label;\n  }\n\n  getType(): string | undefined {\n    return this.model.ctype ?? this.model.label;\n  }\n\n  isHidden(): boolean {\n    return !!this.model.meta.hidden;\n  }\n\n  getParameters<T>(): T {\n    return (this.model.meta.paramsInfo ?? {}) as T;\n  }\n\n  getContent<T>(page: Page): T | null {\n    return getContainerItemContent(this, page);\n  }\n\n  getContentReference(): Reference | undefined {\n    return this.model.content;\n  }\n}\n\n/**\n * Checks whether a value is a page container item.\n * @param value The value to check.\n */\nexport function isContainerItem(value: any): value is ContainerItem {\n  return value instanceof ContainerItemImpl;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable, optional } from 'inversify';\nimport { ComponentImpl, ComponentModel, TYPE_COMPONENT_CONTAINER_ITEM } from './component09';\nimport { ComponentModelToken } from './component';\nimport { ContainerItemEvents, ContainerItemMeta, ContainerItem } from './container-item';\nimport { EmitterMixin } from '../emitter';\nimport { PageEventBusService } from './page-events';\nimport { EventBus, PageUpdateEvent } from './events09';\nimport { Logger } from '../logger';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { PageModel } from './page09';\nimport { UrlBuilderService, UrlBuilder } from '../url';\n\n/**\n * Model of a container item.\n */\nexport interface ContainerItemModel extends ComponentModel {\n  _meta: ContainerItemMeta;\n  ctype?: string;\n  label?: string;\n  type: typeof TYPE_COMPONENT_CONTAINER_ITEM;\n}\n\n@injectable()\nexport class ContainerItemImpl\n  extends EmitterMixin<typeof ComponentImpl, ContainerItemEvents>(ComponentImpl)\n  implements ContainerItem {\n  constructor(\n    @inject(ComponentModelToken) protected model: ContainerItemModel,\n    @inject(MetaCollectionFactory) private metaFactory: MetaCollectionFactory,\n    @inject(UrlBuilderService) urlBuilder: UrlBuilder,\n    @inject(PageEventBusService) @optional() eventBus?: EventBus,\n    @inject(Logger) @optional() private logger?: Logger,\n  ) {\n    super(model, [], metaFactory, urlBuilder);\n\n    eventBus?.on('page.update', this.onPageUpdate.bind(this));\n  }\n\n  protected onPageUpdate(event: PageUpdateEvent): void {\n    const { page: model } = event.page as PageModel;\n    if (model.id !== this.getId()) {\n      return;\n    }\n\n    this.logger?.debug('Received container item update event.');\n    this.logger?.debug('Event:', event);\n\n    this.model = model as ContainerItemModel;\n    this.meta = this.metaFactory(model._meta);\n    this.emit('update', {});\n  }\n\n  getLabel(): string | undefined {\n    return this.model.label;\n  }\n\n  getType(): string | undefined {\n    return this.model.ctype ?? this.model.label;\n  }\n\n  isHidden(): boolean {\n    return !!this.model._meta.hidden;\n  }\n\n  getParameters<T>(): T {\n    return (this.model._meta.paramsInfo ?? {}) as T;\n  }\n\n  getContent<T>(): T | null {\n    this.logger?.warn('The method \"getContent\" is not supported in PMA 0.9 and always returns \"null\".');\n\n    return null;\n  }\n\n  getContentReference(): undefined {\n    this.logger?.warn('The method \"getContentReference\" is not supported in PMA 0.9 and always returns \"undefined\".');\n    return undefined;\n  }\n}\n\n/**\n * Checks whether a value is a page container item.\n * @param value The value to check.\n */\nexport function isContainerItem(value: any): value is ContainerItem {\n  return value instanceof ContainerItemImpl;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const TYPE_META_COMMENT = 'comment';\n\n/**\n * Meta-data following before a page component.\n */\nexport const META_POSITION_BEGIN = 'begin';\n\n/**\n * Meta-data following after a page component.\n */\nexport const META_POSITION_END = 'end';\n\nexport type MetaType = typeof TYPE_META_COMMENT;\nexport type MetaPosition = typeof META_POSITION_BEGIN | typeof META_POSITION_END;\n\nexport interface MetaModel {\n  data: string;\n  type: MetaType;\n}\n\n/**\n * Meta information describing a part of the page.\n */\nexport interface Meta {\n  /**\n   * @return The meta-data.\n   */\n  getData(): string;\n\n  /**\n   * @return The meta-data position relative to the related element.\n   */\n  getPosition(): MetaPosition;\n}\n\nexport class MetaImpl implements Meta {\n  constructor(protected model: MetaModel, protected position: MetaPosition) {}\n\n  getData(): string {\n    return this.model.data;\n  }\n\n  getPosition(): MetaPosition {\n    return this.position;\n  }\n}\n\n/**\n * Checks whether a value is a meta-data object.\n * @param value The value to check.\n */\nexport function isMeta(value: any): value is Meta {\n  return value instanceof MetaImpl;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MetaImpl, Meta } from './meta';\n\nconst HTML_COMMENT = /^<!--(.*)-->$/;\n\nexport type MetaComment = Meta;\n\n/**\n * Meta information stored in HST-comments.\n */\nexport class MetaCommentImpl extends MetaImpl implements MetaComment {\n  getData(): string {\n    const data = super.getData();\n    const [, payload = data] = data.match(HTML_COMMENT) || [];\n\n    return payload;\n  }\n}\n\n/**\n * Checks whether a value is a meta-data comment.\n * @param value The value to check.\n */\nexport function isMetaComment(value: any): value is MetaComment {\n  return value instanceof MetaCommentImpl;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable } from 'inversify';\nimport { SimpleFactory } from './factory';\nimport { MetaModel, MetaPosition, MetaType, Meta } from './meta';\n\ntype MetaBuilder = (model: MetaModel, position: MetaPosition) => Meta;\n\n/**\n * The factory to produce meta-data collection from the page model meta-data.\n */\n@injectable()\nexport class MetaFactory extends SimpleFactory<MetaType, MetaBuilder> {\n  create(meta: MetaModel, position: MetaPosition): Meta {\n    const builder = this.mapping.get(meta.type);\n    if (!builder) {\n      throw new Error(`Unsupported meta type: '${meta.type}'.`);\n    }\n\n    return builder(meta, position);\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable } from 'inversify';\nimport { Meta, MetaModel, META_POSITION_BEGIN, META_POSITION_END } from './meta';\nimport { isMetaComment } from './meta-comment';\nimport { MetaFactory } from './meta-factory';\n\nexport const MetaCollectionModelToken = Symbol.for('MetaCollectionModelToken');\n\nexport interface MetaCollectionModel {\n  beginNodeSpan?: MetaModel[];\n  endNodeSpan?: MetaModel[];\n}\n\n/**\n * Collection of the meta-data describing a part of the page.\n * @note The collection extends the built-in Array type for backward compatibility.\n */\nexport interface MetaCollection extends Array<Meta> {\n  /**\n   * Clears all previously rendered meta-data objects.\n   * @deprecated Use a callback returned by the `render` method.\n   */\n  clear(): void;\n\n  /**\n   * Renders meta-data objects on the page.\n   * @param head The heading node of the page fragment.\n   * @param tail The tailing node of the page fragment.\n   * @return The callback to clear rendered meta-data objects.\n   */\n  render(head: Node, tail: Node): () => void;\n}\n\n@injectable()\nexport class MetaCollectionImpl extends Array<Meta> implements MetaCollection {\n  private comments: Comment[] = [];\n\n  constructor(\n    @inject(MetaCollectionModelToken) model: MetaCollectionModel,\n    @inject(MetaFactory) metaFactory: MetaFactory,\n  ) {\n    super(\n      ...(model.beginNodeSpan || []).map((beginModel) => metaFactory.create(beginModel, META_POSITION_BEGIN)),\n      ...(model.endNodeSpan || []).map((endModel) => metaFactory.create(endModel, META_POSITION_END)),\n    );\n\n    const prototype = Object.create(MetaCollectionImpl.prototype);\n\n    prototype.constructor = Array.prototype.constructor;\n    Object.setPrototypeOf(this, prototype);\n    Object.freeze(this);\n  }\n\n  clear(comments = [...this.comments]): void {\n    comments.forEach((comment) => {\n      comment.remove();\n\n      const index = this.comments.indexOf(comment);\n      if (index > -1) {\n        this.comments.splice(index, 1);\n      }\n    });\n  }\n\n  render(head: Node, tail: Node): () => void {\n    const document = head.ownerDocument ?? tail.ownerDocument;\n    const comments = document\n      ? [\n        ...this.filter(isMetaComment)\n          .filter((meta) => meta.getPosition() === META_POSITION_BEGIN)\n          .map((meta) => document.createComment(meta.getData()))\n          .map((comment) => {\n            head.parentNode?.insertBefore(comment, head);\n\n            return comment;\n          }),\n\n        ...this.filter(isMetaComment)\n          .filter((meta) => meta.getPosition() === META_POSITION_END)\n          .reverse()\n          .map((meta) => document.createComment(meta.getData()))\n          .map((comment) => {\n            if (tail.nextSibling) {\n              tail.parentNode?.insertBefore(comment, tail.nextSibling);\n            } else {\n              tail.parentNode?.appendChild(comment);\n            }\n\n            return comment;\n          }),\n      ]\n      : [];\n\n    this.comments.push(...comments);\n\n    return this.clear.bind(this, comments);\n  }\n}\n\n/**\n * Checks whether a value is a meta-data collection.\n * @param value The value to check.\n */\nexport function isMetaCollection(value: any): value is MetaCollection {\n  return value instanceof MetaCollectionImpl;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable, inject } from 'inversify';\nimport { Builder, SimpleFactory } from './factory';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { MetaCollection, MetaCollectionModel, isMetaCollection } from './meta-collection';\n\ntype ButtonBuilder = Builder<any[], MetaCollection | MetaCollectionModel>;\n\n@injectable()\nexport class ButtonFactory extends SimpleFactory<string, ButtonBuilder> {\n  constructor(@inject(MetaCollectionFactory) private metaCollectionFactory: MetaCollectionFactory) {\n    super();\n  }\n\n  create(type: string, ...params: unknown[]): MetaCollection {\n    if (!this.mapping.has(type)) {\n      throw new Error(`Unsupported button type: '${type}'.`);\n    }\n\n    const meta = this.mapping.get(type)!(...params);\n\n    return isMetaCollection(meta) ? meta : this.metaCollectionFactory(meta);\n  }\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable } from 'inversify';\nimport { ComponentModel, ComponentType, Component } from './component';\nimport { SimpleFactory } from './factory';\nimport { PageModel } from './page';\nimport { resolve } from './reference';\n\ntype ComponentBuilder = (model: ComponentModel, children: Component[]) => Component;\n\n/**\n * A component factory producing components based on a type.\n */\n@injectable()\nexport class ComponentFactory extends SimpleFactory<ComponentType, ComponentBuilder> {\n  /**\n   * Produces a component based on the page model.\n   * @param page The page model.\n   */\n  create(page: PageModel): Component | undefined {\n    const heap = [page.root];\n    const pool = new Map<ComponentModel, Component>();\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < heap.length; i++) {\n      heap.push(...(resolve<ComponentModel>(page, heap[i])?.children ?? []));\n    }\n\n    return heap.reverse().reduce<Component | undefined>((previous, reference) => {\n      const model = resolve<ComponentModel>(page, reference)!;\n      const children = model?.children?.map((child) => pool.get(resolve<ComponentModel>(page, child)!)!) ?? [];\n      const component = this.buildComponent(model, children);\n\n      pool.set(model, component);\n\n      return component;\n    }, undefined);\n  }\n\n  private buildComponent(model: ComponentModel, children: Component[]): Component {\n    const builder = this.mapping.get(model.type);\n    if (!builder) {\n      throw new Error(`Unsupported component type: '${model.type}'.`);\n    }\n\n    return builder(model, children);\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable } from 'inversify';\nimport { Builder, SimpleFactory } from './factory';\nimport { ContentModel } from './content';\n\ntype ContentBuilder = Builder<[ContentModel], unknown>;\n\n@injectable()\nexport class ContentFactory extends SimpleFactory<ContentModel['type'], ContentBuilder> {\n  create(model: ContentModel): ContentModel {\n    if (!this.mapping.has(model.type)) {\n      return model;\n    }\n\n    return this.mapping.get(model.type)!(model) as ContentModel;\n  }\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport render from 'dom-serializer';\nimport type { Document } from 'domhandler';\nimport { getAttributeValue, getElementsByTagName, hasAttrib } from 'domutils';\nimport { parseDocument } from 'htmlparser2';\nimport { inject, injectable } from 'inversify';\nimport { Link, TYPE_LINK_RESOURCE } from './link';\nimport { LinkFactory } from './link-factory';\n\nexport const LinkRewriterService = Symbol.for('LinkRewriterService');\n\nexport interface LinkRewriter {\n  /**\n   * Rewrite links to pages and resources in the HTML content.\n   * @param content The HTML content to rewrite links.\n   * @param type The content type.\n   */\n  rewrite(content: string, type?: string): string;\n}\n\n@injectable()\nexport class LinkRewriterImpl implements LinkRewriter {\n  constructor(@inject(LinkFactory) private linkFactory: LinkFactory) {}\n\n  rewrite(content: string, type = 'text/html'): string {\n    const document = parseDocument(content, { xmlMode: type !== 'text/html' });\n\n    this.rewriteAnchors(document);\n    this.rewriteImages(document);\n\n    return render(document, { selfClosingTags: true });\n  }\n\n  private rewriteAnchors(document: Document): void {\n    Array.from(getElementsByTagName('a', document))\n      .filter((element) => hasAttrib(element, 'href') && hasAttrib(element, 'data-type'))\n      .forEach((element) => {\n        const url = this.linkFactory.create({\n          href: getAttributeValue(element, 'href'),\n          type: getAttributeValue(element, 'data-type'),\n        } as Link);\n\n        if (url) {\n          element.attribs.href = url;\n        }\n\n        return element;\n      });\n  }\n\n  private rewriteImages(document: Document): void {\n    Array.from(getElementsByTagName('img', document))\n      .filter((element) => hasAttrib(element, 'src'))\n      .forEach((element) => {\n        const url = this.linkFactory.create({\n          href: getAttributeValue(element, 'src'),\n          type: TYPE_LINK_RESOURCE,\n        });\n\n        if (url) {\n          element.attribs.src = url;\n        }\n      });\n  }\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable, optional } from 'inversify';\nimport { CmsEventBus, CmsEventBusService } from '../cms';\nimport { Logger } from '../logger';\nimport { isAbsoluteUrl, resolveUrl } from '../url';\nimport { ButtonFactory } from './button-factory';\nimport { ManageContentButton, TYPE_MANAGE_CONTENT_BUTTON } from './button-manage-content';\nimport { Component, ComponentMeta, ComponentModel } from './component';\nimport { ComponentFactory } from './component-factory';\nimport { ContainerModel } from './container';\nimport { ContainerItemModel } from './container-item';\nimport { ContentModel } from './content';\nimport { ContentFactory } from './content-factory';\nimport { Content } from './content09';\nimport { isLink, Link } from './link';\nimport { LinkFactory } from './link-factory';\nimport { LinkRewriter, LinkRewriterService } from './link-rewriter';\nimport { Menu, TYPE_MANAGE_MENU_BUTTON } from './menu';\nimport { MetaCollection, MetaCollectionModel } from './meta-collection';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { PageEventBus, PageEventBusService, PageUpdateEvent } from './page-events';\nimport { isReference, Reference, resolve } from './reference';\nimport { Visit, Visitor } from './relevance';\n\nexport const PageModelToken = Symbol.for('PageModelToken');\n\ntype ChannelParameters = Record<string, any>;\ntype PageLinks = 'self' | 'site';\n\n/**\n * Current channel info.\n */\ninterface ChannelInfoModel {\n  props: ChannelParameters;\n}\n\n/**\n * Current channel of a page.\n */\ninterface ChannelModel {\n  info: ChannelInfoModel;\n}\n\n/**\n * Meta-data of a page root component.\n */\ninterface PageRootMeta extends ComponentMeta {\n  pageTitle?: string;\n}\n\n/**\n * Model of a page root component.\n */\ninterface PageRootModel {\n  meta: PageRootMeta;\n}\n\n/**\n * Meta-data of a page.\n */\ninterface PageMeta {\n  /**\n   * The page locale, e.g. en_US, nl_NL, etc\n   */\n  locale?: string;\n\n  /**\n   * The current Page Model version.\n   */\n  version?: string;\n\n  /**\n   * Meta-data about the current visitor. Available when the Relevance Module is enabled.\n   * @see https://documentation.bloomreach.com/library/enterprise/enterprise-features/targeting/targeting.html\n   */\n  visitor?: Visitor;\n\n  /**\n   * Meta-data about the current visit. Available when the Relevance Module is enabled.\n   * @see https://documentation.bloomreach.com/library/enterprise/enterprise-features/targeting/targeting.html\n   */\n  visit?: Visit;\n\n  /**\n   * Preview mode flag.\n   */\n  preview?: boolean;\n}\n\n/**\n * Model of a page.\n */\nexport interface PageModel {\n  channel: ChannelModel;\n  document?: Reference;\n  links: Record<PageLinks, Link>;\n  meta: PageMeta;\n  page: Record<string, ((ComponentModel | ContainerItemModel | ContainerModel) & PageRootModel) | ContentModel>;\n  root: Reference;\n}\n\n/**\n * The current page to render.\n */\nexport interface Page {\n  /**\n   * Generates a manage content button.\n   * @return The manage content button meta-data.\n   */\n  getButton(type: typeof TYPE_MANAGE_CONTENT_BUTTON, button: ManageContentButton): MetaCollection;\n\n  /**\n   * Generates a manage menu button.\n   * @return The menu button meta-data.\n   */\n  getButton(type: typeof TYPE_MANAGE_MENU_BUTTON, menu: Menu): MetaCollection;\n\n  /**\n   * Generates a meta-data collection for the Experience Manager buttons.\n   * @return The button meta-data.\n   */\n  getButton(type: string, ...params: any[]): MetaCollection;\n\n  /**\n   * Gets current channel parameters.\n   * @returns The channel parameters.\n   */\n  getChannelParameters<T extends ChannelParameters = ChannelParameters>(): T;\n\n  /**\n   * Gets a root component in the page.\n   * @return The root component.\n   */\n  getComponent<T extends Component>(): T;\n\n  /**\n   * Gets a component in the page (e.g. `getComponent('main', 'right')`).\n   * @param componentNames The names of the component and its parents.\n   * @return The component, or `undefined` if no such component exists.\n   */\n  getComponent<T extends Component>(...componentNames: string[]): T | undefined;\n\n  /**\n   * Gets a content item used on the page.\n   * @param reference The reference to the content. It can be an object containing\n   * an [RFC-6901](https://tools.ietf.org/html/rfc6901) JSON Pointer.\n   */\n  getContent(reference: Reference | string): Content | undefined;\n\n  /**\n   * Gets a custom content item used on the page.\n   * @param reference The reference to the content. It can be an object containing\n   * an [RFC-6901](https://tools.ietf.org/html/rfc6901) JSON Pointer.\n   */\n  getContent<T>(reference: Reference | string): T | undefined;\n\n  /**\n   * Gets the page root document.\n   * This option is available only along with the Experience Pages feature.\n   */\n  getDocument<T>(): T | undefined;\n\n  /**\n   * The page locale, defaults to en_US.\n   */\n  getLocale(): string;\n\n  /**\n   * Generates a meta-data collection from the provided meta-data model.\n   * @param meta The meta-data collection model as returned by the page-model-api.\n   * @deprecated Use `getButton` method to create buttons.\n   */\n  getMeta(meta: MetaCollectionModel): MetaCollection;\n\n  /**\n   * @return The title of the page, or `undefined` if not configured.\n   */\n  getTitle(): string | undefined;\n\n  /**\n   * Generates a URL for a link object.\n   * - If the link object type is internal, then it will prepend `spaBaseUrl` or `baseUrl`.\n   *   In case when the link starts with the same path as in `cmsBaseUrl`, this part will be removed.\n   *   For example, for link `/site/_cmsinternal/spa/about` with configuration options\n   *   `cmsBaseUrl = \"http://localhost:8080/site/_cmsinternal/spa\"` and `spaBaseUrl = \"http://example.com\"`\n   *   it will generate `http://example.com/about`.\n   * - If the link object type is unknown, then it will return `undefined`.\n   * - If the link parameter is omitted, then the link to the current page will be returned.\n   * - In other cases, the link will be returned as-is.\n   * @param link The link object to generate URL.\n   */\n  getUrl(link?: Link): string | undefined;\n\n  /**\n   * Generates an SPA URL for the path.\n   * - If it is a relative path and `cmsBaseUrl` is present, then it will prepend `spaBaseUrl`.\n   * - If it is an absolute path and `cmsBaseUrl` is present,\n   *   then the behavior will be similar to internal link generation.\n   * - If it is a relative path and `endpoint` is present,\n   *   then it will resolve this link relative to the current page URL.\n   * - If it is an absolute path and `endpoint` is present,\n   *   then it will resolve this link relative to the `baseUrl` option.\n   * @param path The path to generate URL.\n   */\n  getUrl(path: string): string;\n\n  /**\n   * @return The Page Model version.\n   */\n  getVersion(): string | undefined;\n\n  /**\n   * @return The current visitor data.\n   */\n  getVisitor(): Visitor | undefined;\n\n  /**\n   * @return The current visit data.\n   */\n  getVisit(): Visit | undefined;\n\n  /**\n   * @returns Whether the page is in the preview mode.\n   */\n  isPreview(): boolean;\n\n  /**\n   * Rewrite links to pages and resources in the HTML content.\n   * This method looks up for `a` tags with `data-type` and `href` attributes and `img` tags with `src` attribute.\n   * Links will be updated according to the configuration used to initialize the page.\n   * @param content The HTML content to rewrite links.\n   * @param type The content type.\n   */\n  rewriteLinks(content: string, type?: string): string;\n\n  /**\n   * Synchronizes the CMS integration state.\n   */\n  sync(): void;\n\n  /**\n   * @return A plain JavaScript object of the page model.\n   */\n  toJSON(): any;\n}\n\n@injectable()\nexport class PageImpl implements Page {\n  protected content = new WeakMap<Record<string, any>, unknown>();\n\n  protected root?: Component;\n\n  constructor(\n    @inject(PageModelToken) protected model: PageModel,\n    @inject(ButtonFactory) private buttonFactory: ButtonFactory,\n    @inject(ComponentFactory) componentFactory: ComponentFactory,\n    @inject(ContentFactory) private contentFactory: ContentFactory,\n    @inject(LinkFactory) private linkFactory: LinkFactory,\n    @inject(LinkRewriterService) private linkRewriter: LinkRewriter,\n    @inject(MetaCollectionFactory) private metaFactory: MetaCollectionFactory,\n    @inject(CmsEventBusService) @optional() private cmsEventBus: CmsEventBus,\n    @inject(PageEventBusService) @optional() pageEventBus?: PageEventBus,\n    @inject(Logger) @optional() private logger?: Logger,\n  ) {\n    pageEventBus?.on('page.update', this.onPageUpdate.bind(this));\n\n    this.root = componentFactory.create(model);\n  }\n\n  protected onPageUpdate(event: PageUpdateEvent): void {\n    Object.assign(this.model.page, event.page.page);\n  }\n\n  getButton(type: string, ...params: unknown[]): MetaCollection {\n    return this.buttonFactory.create(type, ...params);\n  }\n\n  getChannelParameters<T>(): T {\n    return this.model.channel.info.props as T;\n  }\n\n  getComponent<T extends Component>(): T;\n\n  getComponent<T extends Component>(...componentNames: string[]): T | undefined;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  getComponent(...componentNames: string[]) {\n    return this.root?.getComponent(...componentNames);\n  }\n\n  getContent<T>(reference: Reference | string): T | undefined;\n\n  getContent(reference: Reference | string): unknown | undefined {\n    if (typeof window !== 'undefined') {\n      alert('getContent CALL');\n    }\n    console.log('getContent reference', reference);\n    console.trace(reference);\n    const model = resolve<ContentModel>(\n      this.model,\n      isReference(reference) ? reference : { $ref: `/page/${reference}` },\n    );\n\n    if (!model) {\n      return undefined;\n    }\n\n    if (!this.content.has(model)) {\n      this.content.set(model, this.contentFactory.create(model));\n    }\n\n    return this.content.get(model);\n  }\n\n  getDocument<T>(): T | undefined {\n    return this.model.document && this.getContent(this.model.document);\n  }\n\n  getLocale(): string {\n    return this.model.meta.locale || 'en_US';\n  }\n\n  getMeta(meta: MetaCollectionModel): MetaCollection {\n    return this.metaFactory(meta);\n  }\n\n  getTitle(): string | undefined {\n    return resolve<PageRootModel>(this.model, this.model.root)?.meta?.pageTitle;\n  }\n\n  getUrl(link?: Link): string | undefined;\n\n  getUrl(path: string): string;\n\n  getUrl(link?: Link | string): string | undefined {\n    if (typeof link === 'undefined' || isLink(link) || isAbsoluteUrl(link)) {\n      return this.linkFactory.create((link as Link) ?? this.model.links.site ?? '');\n    }\n\n    return resolveUrl(link, this.linkFactory.create(this.model.links.site) ?? '');\n  }\n\n  getVersion(): string | undefined {\n    return this.model.meta.version;\n  }\n\n  getVisitor(): Visitor | undefined {\n    return this.model.meta.visitor;\n  }\n\n  getVisit(): Visit | undefined {\n    return this.model.meta.visit;\n  }\n\n  isPreview(): boolean {\n    return !!this.model.meta.preview;\n  }\n\n  rewriteLinks(content: string, type = 'text/html'): string {\n    return this.linkRewriter.rewrite(content, type);\n  }\n\n  sync(): void {\n    this.cmsEventBus?.emit('page.ready', {});\n  }\n\n  toJSON(): PageModel {\n    return this.model;\n  }\n}\n\n/**\n * Checks whether a value is a page.\n * @param value The value to check.\n */\nexport function isPage(value: any): value is Page {\n  return value instanceof PageImpl;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable } from 'inversify';\nimport { ComponentModel, ComponentType } from './component09';\nimport { Component } from './component';\nimport { SimpleFactory } from './factory';\n\ninterface Task {\n  model: ComponentModel;\n  children?: Component[];\n  siblings?: Component[];\n}\n\ntype ComponentBuilder = (model: ComponentModel, children: Component[]) => Component;\n\n/**\n * A component factory producing components based on a type.\n */\n@injectable()\nexport class ComponentFactory extends SimpleFactory<ComponentType, ComponentBuilder> {\n  /**\n   * Produces a component based on the model.\n   * @param model The component model.\n   */\n  create(model: ComponentModel): Component {\n    let component: Component;\n    const queue = [{ model } as Task];\n\n    while (queue.length) {\n      const head = queue.shift()!;\n      if (!head.children && head.model.components?.length) {\n        head.children = [];\n        queue.unshift(\n          ...head.model.components.map((componentModel) => ({ model: componentModel, siblings: head.children })),\n          head,\n        );\n\n        continue;\n      }\n\n      component = this.buildComponent(head.model, head.children ?? []);\n\n      if (head.siblings) {\n        head.siblings.push(component);\n      }\n    }\n\n    return component!;\n  }\n\n  private buildComponent(model: ComponentModel, children: Component[]): Component {\n    const builder = this.mapping.get(model.type);\n    if (!builder) {\n      throw new Error(`Unsupported component type: '${model.type}'.`);\n    }\n\n    return builder(model, children);\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Builder } from './factory';\nimport { ContentModel, Content } from './content09';\n\nexport const ContentFactory = Symbol.for('ContentFactory');\n\nexport type ContentFactory = Builder<[ContentModel], Content>;\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable, optional } from 'inversify';\nimport { CmsEventBus, CmsEventBusService } from '../cms';\nimport { Logger } from '../logger';\nimport { ButtonFactory } from './button-factory';\nimport { Component, ComponentMeta } from './component';\nimport { ComponentFactory } from './component-factory09';\nimport { ComponentModel } from './component09';\nimport { ContainerItemModel } from './container-item09';\nimport { ContainerModel } from './container09';\nimport { ContentFactory } from './content-factory09';\nimport { Content, ContentModel } from './content09';\nimport { EventBus, PageUpdateEvent } from './events09';\nimport { Link, TYPE_LINK_INTERNAL } from './link';\nimport { LinkFactory } from './link-factory';\nimport { LinkRewriter, LinkRewriterService } from './link-rewriter';\nimport { MetaCollection, MetaCollectionModel } from './meta-collection';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { Page, PageModel as PageModel10, PageModelToken } from './page';\nimport { PageEventBusService } from './page-events';\nimport { isReference, Reference } from './reference';\nimport { Visit, Visitor } from './relevance';\n\n/**\n * Meta-data of a page root component.\n */\ninterface PageRootMeta extends ComponentMeta {\n  pageTitle?: string;\n}\n\n/**\n * Model of a page root component.\n */\ninterface PageRootModel {\n  _meta: PageRootMeta;\n}\n\n/**\n * Model of a page.\n */\nexport interface PageModel {\n  _links: PageModel10['links'];\n  _meta: PageModel10['meta'];\n  channel?: PageModel10['channel'];\n  content?: { [reference: string]: ContentModel; };\n  page: (ComponentModel | ContainerItemModel | ContainerModel) & PageRootModel;\n}\n\n@injectable()\nexport class PageImpl implements Page {\n  protected content: Map<string, Content>;\n\n  protected root: Component;\n\n  constructor(\n    @inject(PageModelToken) protected model: PageModel,\n    @inject(ButtonFactory) private buttonFactory: ButtonFactory,\n    @inject(ComponentFactory) componentFactory: ComponentFactory,\n    @inject(ContentFactory) private contentFactory: ContentFactory,\n    @inject(LinkFactory) private linkFactory: LinkFactory,\n    @inject(LinkRewriterService) private linkRewriter: LinkRewriter,\n    @inject(MetaCollectionFactory) private metaFactory: MetaCollectionFactory,\n    @inject(CmsEventBusService) private cmsEventBus: CmsEventBus,\n    @inject(PageEventBusService) @optional() eventBus?: EventBus,\n    @inject(Logger) @optional() private logger?: Logger,\n  ) {\n    eventBus?.on('page.update', this.onPageUpdate.bind(this));\n\n    this.root = componentFactory.create(model.page);\n    this.content = new Map(Object.entries(model.content || {}).map(([alias, m]) => [alias, this.contentFactory(m)]));\n  }\n\n  protected onPageUpdate(event: PageUpdateEvent): void {\n    Object\n      .entries((event.page as PageModel).content || {})\n      .forEach(([alias, model]) => this.content.set(alias, this.contentFactory(model)));\n  }\n\n  private static getContentReference(reference: Reference): string {\n    return reference.$ref.split('/', 3)[2] || '';\n  }\n\n  getButton(type: string, ...params: unknown[]): MetaCollection {\n    return this.buttonFactory.create(type, ...params);\n  }\n\n  getChannelParameters<T>(): T {\n    return (this.model.channel?.info.props ?? {}) as T;\n  }\n\n  getComponent<T extends Component>(): T;\n\n  getComponent<T extends Component>(...componentNames: string[]): T | undefined;\n\n  getComponent(...componentNames: string[]): Component | undefined {\n    return this.root.getComponent(...componentNames);\n  }\n\n  getContent(reference: Reference | string): Content | undefined {\n    const contentReference = isReference(reference) ? PageImpl.getContentReference(reference) : reference;\n\n    return this.content.get(contentReference);\n  }\n\n  getDocument<T>(): T | undefined {\n    throw new Error('The page document is not supported by this version of the Page Model API.');\n  }\n\n  getLocale(): string {\n    throw new Error('The locale is not supported by this version of the Page Model API.');\n  }\n\n  getMeta(meta: MetaCollectionModel): MetaCollection {\n    return this.metaFactory(meta);\n  }\n\n  getTitle(): string | undefined {\n    return this.model.page._meta.pageTitle;\n  }\n\n  getUrl(link?: Link): string | undefined;\n\n  getUrl(path: string): string;\n\n  getUrl(link?: Link | string): string | undefined {\n    return this.linkFactory.create((link as Link) ?? { ...this.model._links.site, type: TYPE_LINK_INTERNAL });\n  }\n\n  getVersion(): string | undefined {\n    return this.model._meta.version;\n  }\n\n  getVisitor(): Visitor | undefined {\n    return this.model._meta.visitor;\n  }\n\n  getVisit(): Visit | undefined {\n    return this.model._meta.visit;\n  }\n\n  isPreview(): boolean {\n    return !!this.model._meta.preview;\n  }\n\n  rewriteLinks(content: string, type = 'text/html'): string {\n    return this.linkRewriter.rewrite(content, type);\n  }\n\n  sync(): void {\n    this.cmsEventBus?.emit('page.ready', {});\n  }\n\n  toJSON(): PageModel {\n    return this.model;\n  }\n}\n\n/**\n * Checks whether a value is a page.\n * @param value The value to check.\n */\nexport function isPage(value: any): value is Page {\n  return value instanceof PageImpl;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable } from 'inversify';\nimport { LinkFactory } from './link-factory';\nimport { Link } from './link';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { MetaCollectionModel, MetaCollection } from './meta-collection';\n\nexport const ContentModelToken = Symbol.for('ContentModelToken');\n\ntype ContentLinks = 'site';\n\n/**\n * Model of a content item.\n */\nexport interface ContentModel {\n  _links: Record<ContentLinks, Link>;\n  _meta?: MetaCollectionModel;\n  id: string;\n  localeString?: string;\n  name: string;\n  [property: string]: any;\n}\n\n/**\n * Content used on the page.\n */\nexport interface Content {\n  /**\n   * @return The content id.\n   */\n  getId(): string;\n\n  /**\n   * @return The content locale.\n   */\n  getLocale(): string | undefined;\n\n  /**\n   * @return The content meta-data collection.\n   */\n  getMeta(): MetaCollection;\n\n  /**\n   * @return The content name.\n   */\n  getName(): string;\n\n  /**\n   * @return The content data as it is returned in the Page Model API.\n   */\n  getData(): ContentModel;\n  getData<T extends Record<string, any>>(): T & ContentModel;\n\n  /**\n   * @return The link to the content.\n   */\n  getUrl(): string | undefined;\n}\n\n@injectable()\nexport class ContentImpl implements Content {\n  protected meta: MetaCollection;\n\n  constructor(\n    @inject(ContentModelToken) protected model: ContentModel,\n    @inject(LinkFactory) private linkFactory: LinkFactory,\n    @inject(MetaCollectionFactory) metaFactory: MetaCollectionFactory,\n  ) {\n    this.meta = metaFactory(this.model._meta ?? {});\n  }\n\n  getId(): string {\n    return this.model.id;\n  }\n\n  getLocale(): string | undefined {\n    return this.model.localeString;\n  }\n\n  getMeta(): MetaCollection {\n    return this.meta;\n  }\n\n  getName(): string {\n    return this.model.name;\n  }\n\n  getData(): ContentModel {\n    return this.model;\n  }\n\n  getUrl(): string | undefined {\n    return this.linkFactory.create(this.model._links.site);\n  }\n}\n\n/**\n * Checks whether a value is a content.\n * @param value The value to check.\n */\nexport function isContent(value: any): value is Content {\n  return value instanceof ContentImpl;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable } from 'inversify';\nimport { LinkFactory } from './link-factory';\nimport { Link } from './link';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { MetaCollectionModel, MetaCollection } from './meta-collection';\n\nexport const DocumentModelToken = Symbol.for('DocumentModelToken');\n\nexport const TYPE_DOCUMENT = 'document';\n\ntype DocumentLinks = 'site';\n\ninterface DocumentDataModel {\n  id: string;\n  localeString?: string;\n  name: string;\n  [property: string]: any;\n}\n\n/**\n * Model of a document item.\n */\nexport interface DocumentModel {\n  data: DocumentDataModel;\n  links: Record<DocumentLinks, Link>;\n  meta?: MetaCollectionModel;\n  type: typeof TYPE_DOCUMENT;\n}\n\n/**\n * Document used on the page.\n */\nexport interface Document {\n  /**\n   * @return The document id.\n   */\n  getId(): string;\n\n  /**\n   * @return The document locale.\n   */\n  getLocale(): string | undefined;\n\n  /**\n   * @return The document meta-data collection.\n   */\n  getMeta(): MetaCollection;\n\n  /**\n   * @return The document name.\n   */\n  getName(): string;\n\n  /**\n   * @return The document data.\n   */\n  getData(): DocumentDataModel;\n  getData<T extends Record<string, any>>(): T & DocumentDataModel;\n\n  /**\n   * @return The link to the content.\n   */\n  getUrl(): string | undefined;\n}\n\n@injectable()\nexport class DocumentImpl implements Document {\n  protected meta: MetaCollection;\n\n  constructor(\n    @inject(DocumentModelToken) protected model: DocumentModel,\n    @inject(LinkFactory) private linkFactory: LinkFactory,\n    @inject(MetaCollectionFactory) metaFactory: MetaCollectionFactory,\n  ) {\n    this.meta = metaFactory(this.model.meta ?? {});\n  }\n\n  getId(): string {\n    return this.model.data.id;\n  }\n\n  getLocale(): string | undefined {\n    return this.model.data.localeString;\n  }\n\n  getMeta(): MetaCollection {\n    return this.meta;\n  }\n\n  getName(): string {\n    return this.model.data.name;\n  }\n\n  getData(): DocumentDataModel {\n    return this.model.data;\n  }\n\n  getUrl(): string | undefined {\n    return this.linkFactory.create(this.model.links.site);\n  }\n}\n\n/**\n * Checks whether a value is a document.\n * @param value The value to check.\n */\nexport function isDocument(value: any): value is Document {\n  return value instanceof DocumentImpl;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable, inject } from 'inversify';\nimport { Builder } from './factory';\nimport { LinkFactory } from './link-factory';\nimport { Link } from './link';\n\nexport const ImageFactory = Symbol.for('ImageFactory');\nexport const ImageModelToken = Symbol.for('ImageModelToken');\n\ntype ImageLinks = 'site';\n\n/**\n * Image model.\n */\nexport interface ImageModel {\n  displayName: string;\n  fileName: string | null;\n  height: number;\n  links: Partial<Record<ImageLinks, Link>>;\n  mimeType: string;\n  name: string;\n  size: number;\n  width: number;\n}\n\nexport interface Image {\n  /**\n   * @return The image display name.\n   */\n  getDisplayName(): string;\n\n  /**\n   * @return The image file name.\n   */\n  getFileName(): string | undefined;\n\n  /**\n   * @return The image height.\n   */\n  getHeight(): number;\n\n  /**\n   * @return The image mime-type.\n   */\n  getMimeType(): string;\n\n  /**\n   * @return The image name.\n   */\n  getName(): string;\n\n  /**\n   * @return The image size.\n   */\n  getSize(): number;\n\n  /**\n   * @return The image link.\n   */\n  getUrl(): string | undefined;\n\n  /**\n   * @return The image width.\n   */\n  getWidth(): number;\n}\n\nexport type ImageFactory = Builder<[ImageModel], Image>;\n\n@injectable()\nexport class ImageImpl implements Image {\n  constructor(\n    @inject(ImageModelToken) protected model: ImageModel,\n    @inject(LinkFactory) private linkFactory: LinkFactory,\n  ) {}\n\n  getDisplayName(): string {\n    return this.model.displayName;\n  }\n\n  getFileName(): string | undefined {\n    return this.model.fileName ?? undefined;\n  }\n\n  getHeight(): number {\n    return this.model.height;\n  }\n\n  getMimeType(): string {\n    return this.model.mimeType;\n  }\n\n  getName(): string {\n    return this.model.name;\n  }\n\n  getSize(): number {\n    return this.model.size;\n  }\n\n  getUrl(): string | undefined {\n    return this.model.links.site && this.linkFactory.create(this.model.links.site);\n  }\n\n  getWidth(): number {\n    return this.model.width;\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable, inject } from 'inversify';\nimport { ImageFactory, ImageModel, Image } from './image';\n\nexport const ImageSetModelToken = Symbol.for('ImageSetModelToken');\n\nexport const TYPE_IMAGE_SET = 'imageset';\n\ninterface ImageSetDataModel {\n  description: string | null;\n  displayName: string;\n  fileName: string;\n  id: string;\n  localeString: string | null;\n  name: string;\n  original: ImageModel | null;\n  thumbnail: ImageModel | null;\n}\n\n/**\n * Image set model.\n */\nexport interface ImageSetModel {\n  data: ImageSetDataModel;\n  type: typeof TYPE_IMAGE_SET;\n}\n\nexport interface ImageSet {\n  /**\n   * @return The image set description.\n   */\n  getDescription(): string | undefined;\n\n  /**\n   * @return The image set display name.\n   */\n  getDisplayName(): string;\n\n  /**\n   * @return The image set file name.\n   */\n  getFileName(): string;\n\n  /**\n   * @return The image set id.\n   */\n  getId(): string;\n\n  /**\n   * @return The image set locale.\n   */\n  getLocale(): string | undefined;\n\n  /**\n   * @return The image name.\n   */\n  getName(): string;\n\n  /**\n   * @return The original image.\n   */\n  getOriginal(): Image | undefined;\n\n  /**\n   * @return The thumbnail.\n   */\n  getThumbnail(): Image | undefined;\n}\n\n@injectable()\nexport class ImageSetImpl implements ImageSet {\n  private original?: Image;\n\n  private thumbnail?: Image;\n\n  constructor(\n    @inject(ImageSetModelToken) protected model: ImageSetModel,\n    @inject(ImageFactory) imageFactory: ImageFactory,\n  ) {\n    this.original = model.data.original ? imageFactory(model.data.original) : undefined;\n\n    this.thumbnail = model.data.thumbnail ? imageFactory(model.data.thumbnail) : undefined;\n  }\n\n  getDescription(): string | undefined {\n    return this.model.data.description ?? undefined;\n  }\n\n  getDisplayName(): string {\n    return this.model.data.displayName;\n  }\n\n  getFileName(): string {\n    return this.model.data.fileName ?? undefined;\n  }\n\n  getId(): string {\n    return this.model.data.id;\n  }\n\n  getLocale(): string | undefined {\n    return this.model.data.localeString ?? undefined;\n  }\n\n  getName(): string {\n    return this.model.data.name;\n  }\n\n  getOriginal(): Image | undefined {\n    return this.original;\n  }\n\n  getThumbnail(): Image | undefined {\n    return this.thumbnail;\n  }\n}\n\n/**\n * Checks whether a value is an image set.\n * @param value The value to check.\n */\nexport function isImageSet(value: unknown): value is ImageSet {\n  return value instanceof ImageSetImpl;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Content } from './content09';\nimport { Document } from './document';\nimport { Meta, MetaModel, META_POSITION_BEGIN, META_POSITION_END, TYPE_META_COMMENT } from './meta';\nimport { MetaCollectionModel, MetaCollection } from './meta-collection';\n\n/**\n * A manage content button.\n */\nexport const TYPE_MANAGE_CONTENT_BUTTON = 'MANAGE_CONTENT_LINK';\n\nexport interface ManageContentButton {\n  /**\n   * The content entity to open for editing.\n   */\n  content?: Content | Document;\n\n  /**\n   * Template query to use for creating new documents.\n   */\n  documentTemplateQuery?: string;\n\n  /**\n   * Template query to use in case folders specified by `path` do not yet exist and must be created.\n   */\n  folderTemplateQuery?: string;\n\n  /**\n   * Initial location of a new document, relative to the `root`.\n   */\n  path?: string;\n\n  /**\n   * Name of the component parameter in which the document path is stored.\n   */\n  parameter?: string;\n\n  /**\n   * Flag indicating that the picked value should be stored as a relative path.\n   */\n  relative?: boolean;\n\n  /**\n   * Path to the root folder of selectable document locations.\n   */\n  root?: string;\n\n  /**\n   * The root path of the CMS configuration to use for the picker, relative to /hippo:configuration/hippo:frontend/cms.\n   * Default value: \"cms-pickers/documents\".\n   */\n  pickerConfiguration?: string;\n\n  /**\n   * When this picker is used for images, this flag determines if uploads are enabled\n   */\n  pickerEnableUpload?: boolean;\n\n  /**\n   * The initial path to use in the picker if nothing has been selected yet, relative to the pickerRootPath.\n   * Default value: \"\" (empty string).\n   */\n  pickerInitialPath?: string;\n\n  /**\n   * Whether the picker remembers the last visited path. Default: true.\n   */\n  pickerRemembersLastVisited?: boolean;\n\n  /**\n   * The absolute root path to use in the picker, or an empty string if the channel content path is used. If configured\n   * it must start with a \"/\". Default value: \"\" (empty string).\n   */\n  pickerRootPath?: string;\n\n  /**\n   * Types of nodes to be able to select in the picker, separated by a comma. By default all types are allowed.\n   */\n  pickerSelectableNodeTypes?: string;\n}\n\nexport function createManageContentButton(params: ManageContentButton): MetaCollection | MetaCollectionModel {\n  const meta = params.content?.getMeta();\n  const entries = [\n    ['defaultPath', params.path],\n    ['documentTemplateQuery', params.documentTemplateQuery],\n    ['folderTemplateQuery', params.folderTemplateQuery],\n    ['rootPath', params.root],\n    ['parameterName', params.parameter],\n    ['parameterValueIsRelativePath', params.relative ? 'true' : undefined],\n    ['pickerEnableUpload', params.pickerEnableUpload],\n    ['pickerConfiguration', params.pickerConfiguration],\n    ['pickerInitialPath', params.pickerInitialPath],\n    ['pickerRemembersLastVisited', params.pickerRemembersLastVisited ? 'true' : undefined],\n    ['pickerRootPath', params.pickerRootPath],\n    ['pickerSelectableNodeTypes', params.pickerSelectableNodeTypes],\n  ].filter(([, value]) => !!value);\n\n  if (!entries.length) {\n    return meta ?? {};\n  }\n\n  const model = Object.fromEntries(entries);\n\n  if (!meta) {\n    return {\n      beginNodeSpan: [\n        {\n          type: TYPE_META_COMMENT,\n          data: JSON.stringify({ 'HST-Type': TYPE_MANAGE_CONTENT_BUTTON, ...model }),\n        },\n      ],\n    };\n  }\n\n  const merge = (item: Meta): MetaModel => ({\n    type: TYPE_META_COMMENT,\n    data: JSON.stringify(Object.assign(JSON.parse(item.getData()), model)),\n  } as MetaModel);\n\n  return {\n    beginNodeSpan: meta.filter((item) => item.getPosition() === META_POSITION_BEGIN).map(merge),\n    endNodeSpan: meta.filter((item) => item.getPosition() === META_POSITION_END).map(merge),\n  };\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable, inject } from 'inversify';\nimport { Builder } from './factory';\nimport { LinkFactory } from './link-factory';\nimport { Link } from './link';\n\nexport const MenuItemFactory = Symbol.for('MenuItemFactory');\nexport const MenuItemModelToken = Symbol.for('MenuItemModelToken');\n\ntype MenuItemLinks = 'site';\nexport interface MenuItemModel {\n  childMenuItems: MenuItemModel[];\n  depth: number;\n  expanded: boolean;\n  name: string;\n  parameters: Record<string, unknown>;\n  repositoryBased: boolean;\n  selected: boolean;\n  links: Partial<Record<MenuItemLinks, Link>>;\n}\n\nexport interface MenuItem {\n  /**\n   * @return The child items.\n   */\n  getChildren(): MenuItem[];\n\n  /**\n   * @return The menu item depth level.\n   */\n  getDepth(): number;\n\n  /**\n   * @return The menu item link.\n   */\n  getLink(): Link | undefined;\n\n  /**\n   * @return The menu item name.\n   */\n  getName(): string;\n\n  /**\n   * @return The menu item parameters.\n   */\n  getParameters(): Record<string, unknown>;\n\n  /**\n   * @return The menu item url.\n   */\n  getUrl(): string | undefined;\n\n  /**\n   * @return Whether the menu item is expanded.\n   */\n  isExpanded(): boolean;\n\n  /**\n   * @return Whether the menu item is repository based.\n   */\n  isRepositoryBased(): boolean;\n\n  /**\n   * @return Whether the menu item is selected.\n   */\n  isSelected(): boolean;\n}\n\nexport type MenuItemFactory = Builder<[MenuItemModel], MenuItem>;\n\n@injectable()\nexport class MenuItemImpl implements MenuItem {\n  private children: MenuItem[];\n\n  constructor(\n    @inject(MenuItemModelToken) protected model: MenuItemModel,\n    @inject(LinkFactory) private linkFactory: LinkFactory,\n    @inject(MenuItemFactory) menuItemFactory: MenuItemFactory,\n  ) {\n    this.children = model.childMenuItems.map(menuItemFactory);\n  }\n\n  getChildren(): MenuItem[] {\n    return this.children;\n  }\n\n  getDepth(): number {\n    return this.model.depth;\n  }\n\n  getLink(): Link | undefined {\n    return this.model.links.site;\n  }\n\n  getName(): string {\n    return this.model.name;\n  }\n\n  getParameters(): Record<string, unknown> {\n    return this.model.parameters;\n  }\n\n  getUrl(): string | undefined {\n    return this.model.links.site && this.linkFactory.create(this.model.links.site);\n  }\n\n  isExpanded(): boolean {\n    return this.model.expanded;\n  }\n\n  isRepositoryBased(): boolean {\n    return this.model.repositoryBased;\n  }\n\n  isSelected(): boolean {\n    return this.model.selected;\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable, inject } from 'inversify';\nimport { MenuItemFactory, MenuItemModel, MenuItem } from './menu-item';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { MetaCollectionModel, MetaCollection } from './meta-collection';\n\nexport const MenuModelToken = Symbol.for('MenuModelToken');\n\n/**\n * A manage menu button.\n */\nexport const TYPE_MANAGE_MENU_BUTTON = 'EDIT_MENU_LINK';\n\nexport const TYPE_MENU = 'menu';\n\ninterface MenuDataModel {\n  name: string;\n\n  /**\n   * @deprecated The parameter was removed in the Experience Manager 14.2.\n   */\n  selectSiteMenuItem?: MenuItemModel;\n\n  siteMenuItems: MenuItemModel[];\n}\n\n/**\n * Essentials component menu model.\n */\nexport interface MenuModel {\n  data: MenuDataModel;\n  meta: MetaCollectionModel;\n  type: typeof TYPE_MENU;\n}\n\nexport interface Menu {\n  /**\n   * @return The menu items.\n   */\n  getItems(): MenuItem[];\n\n  /**\n   * @return The menu meta-data collection.\n   */\n  getMeta(): MetaCollection;\n\n  /**\n   * @return The menu name.\n   */\n  getName(): string;\n\n  /**\n   * @deprecated\n   * @return The current menu item.\n   */\n  getSelected(): MenuItem | undefined;\n}\n\n@injectable()\nexport class MenuImpl implements Menu {\n  private items: MenuItem[];\n\n  private meta: MetaCollection;\n\n  private selected?: MenuItem;\n\n  constructor(\n    @inject(MenuModelToken) protected model: MenuModel,\n    @inject(MetaCollectionFactory) metaFactory: MetaCollectionFactory,\n    @inject(MenuItemFactory) menuItemFactory: MenuItemFactory,\n  ) {\n    this.items = model.data.siteMenuItems.map(menuItemFactory);\n    this.meta = metaFactory(model.meta);\n    this.selected = model.data.selectSiteMenuItem ? menuItemFactory(model.data.selectSiteMenuItem) : undefined;\n  }\n\n  getItems(): MenuItem[] {\n    return this.items;\n  }\n\n  getMeta(): MetaCollection {\n    return this.meta;\n  }\n\n  getName(): string {\n    return this.model.data.name;\n  }\n\n  getSelected(): MenuItem | undefined {\n    return this.selected;\n  }\n}\n\n/**\n * Checks whether a value is a menu.\n * @param value The value to check.\n */\nexport function isMenu(value: unknown): value is Menu {\n  return value instanceof MenuImpl;\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Builder } from './factory';\nimport { PageModel, Page } from './page';\nimport { PageModel as PageModel09 } from './page09';\n\nexport const PageFactory = Symbol.for('PageFactory');\n\nexport type PageFactory = Builder<[PageModel | PageModel09], Page>;\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable, inject } from 'inversify';\nimport { Builder } from './factory';\nimport { LinkFactory } from './link-factory';\nimport { Link } from './link';\n\nexport const PaginationItemFactory = Symbol.for('PaginationItemFactory');\nexport const PaginationItemModelToken = Symbol.for('PaginationItemModelToken');\n\ntype PaginationItemLinks = 'self' | 'site';\n\nexport interface PaginationItemModel {\n  number: number;\n  links: Record<PaginationItemLinks, Link>;\n}\n\nexport interface PaginationItem {\n  /**\n   * @return The page number.\n   */\n  getNumber(): number;\n\n  /**\n   * @return The page URL.\n   */\n  getUrl(): string | undefined;\n}\n\nexport type PaginationItemFactory = Builder<[PaginationItemModel], PaginationItem>;\n\n@injectable()\nexport class PaginationItemImpl implements PaginationItem {\n  constructor(\n    @inject(PaginationItemModelToken) protected model: PaginationItemModel,\n    @inject(LinkFactory) private linkFactory: LinkFactory,\n  ) {}\n\n  getNumber(): number {\n    return this.model.number;\n  }\n\n  getUrl(): string | undefined {\n    return this.linkFactory.create(this.model.links.site);\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { injectable, inject } from 'inversify';\nimport { PaginationItemFactory, PaginationItemModel, PaginationItem } from './pagination-item';\nimport { Reference } from './reference';\n\nexport const PaginationModelToken = Symbol.for('PaginationModelToken');\n\nexport const TYPE_PAGINATION = 'pagination';\n\n/**\n * Pagination model.\n */\nexport interface PaginationModel {\n  current: PaginationItemModel;\n  enabled: boolean;\n  first: PaginationItemModel;\n  items: Reference[];\n  last: PaginationItemModel;\n  next?: PaginationItemModel;\n  offset: number;\n  pages: PaginationItemModel[];\n  previous?: PaginationItemModel;\n  size: number;\n  total: number;\n  type: typeof TYPE_PAGINATION;\n}\n\nexport interface Pagination {\n  /**\n   * @return The current page.\n   */\n  getCurrent(): PaginationItem;\n\n  /**\n   * @return The first page.\n   */\n  getFirst(): PaginationItem;\n\n  /**\n   * @return The current page items.\n   */\n  getItems(): Reference[];\n\n  /**\n   * @return The last page.\n   */\n  getLast(): PaginationItem;\n\n  /**\n   * @return The next page.\n   */\n  getNext(): PaginationItem | undefined;\n\n  /**\n   * @return The number of items before the current page.\n   */\n  getOffset(): number;\n\n  /**\n   * @return Currently listed pages.\n   */\n  getPages(): PaginationItem[];\n\n  /**\n   * @return The previous page.\n   */\n  getPrevious(): PaginationItem | undefined;\n\n  /**\n   * @return The number of items listed on the current page.\n   */\n  getSize(): number;\n\n  /**\n   * @return The total number of items.\n   */\n  getTotal(): number;\n\n  /**\n   * @return Whether the pagination is enabled.\n   */\n  isEnabled(): boolean;\n}\n\n@injectable()\nexport class PaginationImpl implements Pagination {\n  private current: PaginationItem;\n\n  private first: PaginationItem;\n\n  private last: PaginationItem;\n\n  private next?: PaginationItem;\n\n  private pages: PaginationItem[];\n\n  private previous?: PaginationItem;\n\n  constructor(\n    @inject(PaginationModelToken) protected model: PaginationModel,\n    @inject(PaginationItemFactory) paginationItemFactory: PaginationItemFactory,\n  ) {\n    this.current = paginationItemFactory(model.current);\n    this.first = paginationItemFactory(model.first);\n    this.last = paginationItemFactory(model.last);\n    this.next = model.next ? paginationItemFactory(model.next) : undefined;\n    this.previous = model.previous ? paginationItemFactory(model.previous) : undefined;\n    this.pages = model.pages.map(paginationItemFactory);\n  }\n\n  getCurrent(): PaginationItem {\n    return this.current;\n  }\n\n  getFirst(): PaginationItem {\n    return this.first;\n  }\n\n  getItems(): Reference[] {\n    return this.model.items;\n  }\n\n  getLast(): PaginationItem {\n    return this.last;\n  }\n\n  getNext(): PaginationItem | undefined {\n    return this.next;\n  }\n\n  getOffset(): number {\n    return this.model.offset;\n  }\n\n  getPages(): PaginationItem[] {\n    return this.pages;\n  }\n\n  getPrevious(): PaginationItem | undefined {\n    return this.previous;\n  }\n\n  getSize(): number {\n    return this.model.size;\n  }\n\n  getTotal(): number {\n    return this.model.total;\n  }\n\n  isEnabled(): boolean {\n    return this.model.enabled;\n  }\n}\n\n/**\n * Checks whether a value is a pagination.\n * @param value The value to check.\n */\nexport function isPagination(value: unknown): value is Pagination {\n  return value instanceof PaginationImpl;\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Typed } from 'emittery';\nimport { ContainerModule } from 'inversify';\nimport { UrlBuilder, UrlBuilderService } from '../url';\n\nimport { ButtonFactory } from './button-factory';\nimport { createManageContentButton, TYPE_MANAGE_CONTENT_BUTTON } from './button-manage-content';\nimport {\n  ComponentChildrenToken,\n  ComponentImpl,\n  ComponentModelToken,\n  TYPE_COMPONENT,\n  TYPE_COMPONENT_CONTAINER,\n  TYPE_COMPONENT_CONTAINER_ITEM,\n} from './component';\nimport { ComponentFactory } from './component-factory';\nimport { ContainerImpl } from './container';\nimport { ContainerItemImpl } from './container-item';\nimport { ContentFactory } from './content-factory';\nimport { DocumentImpl, DocumentModelToken, TYPE_DOCUMENT } from './document';\nimport { ImageFactory, ImageImpl, ImageModel, ImageModelToken } from './image';\nimport { ImageSetImpl, ImageSetModelToken, TYPE_IMAGE_SET } from './image-set';\nimport { TYPE_LINK_INTERNAL } from './link';\nimport { LinkFactory } from './link-factory';\nimport { LinkRewriterImpl, LinkRewriterService } from './link-rewriter';\nimport { Menu, MenuImpl, MenuModelToken, TYPE_MANAGE_MENU_BUTTON, TYPE_MENU } from './menu';\nimport { MenuItemFactory, MenuItemImpl, MenuItemModel, MenuItemModelToken } from './menu-item';\nimport { TYPE_META_COMMENT } from './meta';\nimport { MetaCollectionImpl, MetaCollectionModel, MetaCollectionModelToken } from './meta-collection';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { MetaCommentImpl } from './meta-comment';\nimport { MetaFactory } from './meta-factory';\nimport { PageImpl, PageModel, PageModelToken } from './page';\nimport { PageEventBusService } from './page-events';\nimport { PageFactory } from './page-factory';\nimport { PaginationImpl, PaginationModelToken, TYPE_PAGINATION } from './pagination';\nimport {\n  PaginationItemFactory,\n  PaginationItemImpl,\n  PaginationItemModel,\n  PaginationItemModelToken,\n} from './pagination-item';\n\nexport function PageModule(): ContainerModule {\n  return new ContainerModule((bind) => {\n    bind(PageEventBusService)\n      .toDynamicValue(() => new Typed())\n      .inSingletonScope()\n      .when(() => typeof window !== 'undefined');\n    bind(LinkRewriterService).to(LinkRewriterImpl).inSingletonScope();\n\n    bind(ButtonFactory)\n      .toSelf()\n      .inSingletonScope()\n      .onActivation((context, factory) => factory\n        .register(TYPE_MANAGE_CONTENT_BUTTON, createManageContentButton)\n        .register(TYPE_MANAGE_MENU_BUTTON, (menu: Menu) => menu.getMeta()));\n\n    bind(LinkFactory)\n      .toSelf()\n      .inSingletonScope()\n      .onActivation(({ container }, factory) => {\n        const url = container.get<UrlBuilder>(UrlBuilderService);\n\n        return factory.register(TYPE_LINK_INTERNAL, url.getSpaUrl.bind(url));\n      });\n\n    bind(MetaCollectionFactory).toFactory(({ container }) => (model: MetaCollectionModel) => {\n      const scope = container.createChild();\n      scope.bind(MetaCollectionImpl).toSelf();\n      scope.bind(MetaCollectionModelToken).toConstantValue(model);\n\n      return scope.get(MetaCollectionImpl);\n    });\n\n    bind(MetaFactory)\n      .toSelf()\n      .inSingletonScope()\n      .onActivation((context, factory) => factory\n        .register(TYPE_META_COMMENT, (model, position) => new MetaCommentImpl(model, position)));\n\n    bind(MenuItemFactory).toFactory(({ container }) => (model: MenuItemModel) => {\n      const scope = container.createChild();\n      scope.bind(MenuItemImpl).toSelf();\n      scope.bind(MenuItemModelToken).toConstantValue(model);\n\n      return scope.get(MenuItemImpl);\n    });\n\n    bind(ImageFactory).toFactory(({ container }) => (model: ImageModel) => {\n      const scope = container.createChild();\n      scope.bind(ImageImpl).toSelf();\n      scope.bind(ImageModelToken).toConstantValue(model);\n\n      return scope.get(ImageImpl);\n    });\n\n    bind(PaginationItemFactory).toFactory(({ container }) => (model: PaginationItemModel) => {\n      const scope = container.createChild();\n      scope.bind(PaginationItemImpl).toSelf();\n      scope.bind(PaginationItemModelToken).toConstantValue(model);\n\n      return scope.get(PaginationItemImpl);\n    });\n\n    bind(ContentFactory)\n      .toSelf()\n      .inSingletonScope()\n      .onActivation(({ container }, factory) => factory\n        .register(TYPE_DOCUMENT, (model) => {\n          const scope = container.createChild();\n          scope.bind(DocumentImpl).toSelf();\n          scope.bind(DocumentModelToken).toConstantValue(model);\n\n          return scope.get(DocumentImpl);\n        })\n        .register(TYPE_IMAGE_SET, (model) => {\n          const scope = container.createChild();\n          scope.bind(ImageSetImpl).toSelf();\n          scope.bind(ImageSetModelToken).toConstantValue(model);\n\n          return scope.get(ImageSetImpl);\n        })\n        .register(TYPE_MENU, (model) => {\n          const scope = container.createChild();\n          scope.bind(MenuImpl).toSelf();\n          scope.bind(MenuModelToken).toConstantValue(model);\n\n          return scope.get(MenuImpl);\n        })\n        .register(TYPE_PAGINATION, (model) => {\n          const scope = container.createChild();\n          scope.bind(PaginationImpl).toSelf();\n          scope.bind(PaginationModelToken).toConstantValue(model);\n\n          return scope.get(PaginationImpl);\n        }));\n\n    bind(ComponentFactory)\n      .toSelf()\n      .inSingletonScope()\n      .onActivation(({ container }, factory) => factory\n        .register(TYPE_COMPONENT, (model, children) => {\n          const scope = container.createChild();\n          scope.bind(ComponentImpl).toSelf();\n          scope.bind(ComponentModelToken).toConstantValue(model);\n          scope.bind(ComponentChildrenToken).toConstantValue(children);\n\n          return scope.get(ComponentImpl);\n        })\n        .register(TYPE_COMPONENT_CONTAINER, (model, children) => {\n          const scope = container.createChild();\n          scope.bind(ContainerImpl).toSelf();\n          scope.bind(ComponentModelToken).toConstantValue(model);\n          scope.bind(ComponentChildrenToken).toConstantValue(children);\n\n          return scope.get(ContainerImpl);\n        })\n        .register(TYPE_COMPONENT_CONTAINER_ITEM, (model) => {\n          const scope = container.createChild();\n          scope.bind(ContainerItemImpl).toSelf();\n          scope.bind(ComponentModelToken).toConstantValue(model);\n\n          return scope.get(ContainerItemImpl);\n        }));\n\n    bind(PageFactory).toFactory(({ container }) => (model: PageModel) => {\n      const scope = container.createChild();\n      scope.bind(PageImpl).toSelf();\n      scope.bind(PageModelToken).toConstantValue(model);\n\n      return scope.get(PageImpl);\n    });\n  });\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Typed } from 'emittery';\nimport { ContainerModule } from 'inversify';\nimport { UrlBuilder, UrlBuilderService } from '../url';\n\nimport { ButtonFactory } from './button-factory';\nimport { createManageContentButton, TYPE_MANAGE_CONTENT_BUTTON } from './button-manage-content';\nimport { ComponentChildrenToken, ComponentModelToken } from './component';\nimport { ComponentFactory } from './component-factory09';\nimport { ComponentImpl, TYPE_COMPONENT, TYPE_COMPONENT_CONTAINER, TYPE_COMPONENT_CONTAINER_ITEM } from './component09';\nimport { ContainerItemImpl } from './container-item09';\nimport { ContainerImpl } from './container09';\nimport { ContentFactory } from './content-factory09';\nimport { ContentImpl, ContentModel, ContentModelToken } from './content09';\nimport { TYPE_LINK_INTERNAL } from './link';\nimport { LinkFactory } from './link-factory';\nimport { LinkRewriterImpl, LinkRewriterService } from './link-rewriter';\nimport { TYPE_MANAGE_MENU_BUTTON } from './menu';\nimport { Menu } from './menu09';\nimport { TYPE_META_COMMENT } from './meta';\nimport { MetaCollectionImpl, MetaCollectionModel, MetaCollectionModelToken } from './meta-collection';\nimport { MetaCollectionFactory } from './meta-collection-factory';\nimport { MetaCommentImpl } from './meta-comment';\nimport { MetaFactory } from './meta-factory';\nimport { PageModelToken } from './page';\nimport { PageEventBusService } from './page-events';\nimport { PageFactory } from './page-factory';\nimport { PageImpl, PageModel } from './page09';\n\nexport function PageModule(): ContainerModule {\n  return new ContainerModule((bind) => {\n    bind(PageEventBusService)\n      .toDynamicValue(() => new Typed())\n      .inSingletonScope()\n      .when(() => typeof window !== 'undefined');\n    bind(LinkRewriterService).to(LinkRewriterImpl).inSingletonScope();\n\n    bind(ButtonFactory)\n      .toSelf()\n      .inSingletonScope()\n      .onActivation((context, factory) => factory\n        .register(TYPE_MANAGE_CONTENT_BUTTON, createManageContentButton)\n        .register(TYPE_MANAGE_MENU_BUTTON, ({ _meta }: Menu) => _meta ?? {}));\n\n    bind(LinkFactory)\n      .toSelf()\n      .inSingletonScope()\n      .onActivation(({ container }, factory) => {\n        const url = container.get<UrlBuilder>(UrlBuilderService);\n\n        return factory.register(TYPE_LINK_INTERNAL, url.getSpaUrl.bind(url));\n      });\n\n    bind(MetaCollectionFactory).toFactory(({ container }) => (model: MetaCollectionModel) => {\n      const scope = container.createChild();\n      scope.bind(MetaCollectionImpl).toSelf();\n      scope.bind(MetaCollectionModelToken).toConstantValue(model);\n\n      return scope.get(MetaCollectionImpl);\n    });\n\n    bind(MetaFactory)\n      .toSelf()\n      .inSingletonScope()\n      .onActivation((context, factory) => factory\n        .register(TYPE_META_COMMENT, (model, position) => new MetaCommentImpl(model, position)));\n\n    bind(ContentFactory).toFactory(({ container }) => (model: ContentModel) => {\n      const scope = container.createChild();\n      scope.bind(ContentImpl).toSelf();\n      scope.bind(ContentModelToken).toConstantValue(model);\n\n      return scope.get(ContentImpl);\n    });\n\n    bind(ComponentFactory)\n      .toSelf()\n      .inSingletonScope()\n      .onActivation(({ container }, factory) => factory\n        .register(TYPE_COMPONENT, (model, children) => {\n          const scope = container.createChild();\n          scope.bind(ComponentImpl).toSelf();\n          scope.bind(ComponentModelToken).toConstantValue(model);\n          scope.bind(ComponentChildrenToken).toConstantValue(children);\n\n          return scope.get(ComponentImpl);\n        })\n        .register(TYPE_COMPONENT_CONTAINER, (model, children) => {\n          const scope = container.createChild();\n          scope.bind(ContainerImpl).toSelf();\n          scope.bind(ComponentModelToken).toConstantValue(model);\n          scope.bind(ComponentChildrenToken).toConstantValue(children);\n\n          return scope.get(ContainerImpl);\n        })\n        .register(TYPE_COMPONENT_CONTAINER_ITEM, (model) => {\n          const scope = container.createChild();\n          scope.bind(ContainerItemImpl).toSelf();\n          scope.bind(ComponentModelToken).toConstantValue(model);\n\n          return scope.get(ContainerItemImpl);\n        }));\n\n    bind(PageFactory).toFactory(({ container }) => (model: PageModel) => {\n      const scope = container.createChild();\n      scope.bind(PageImpl).toSelf();\n      scope.bind(PageModelToken).toConstantValue(model);\n\n      return scope.get(PageImpl);\n    });\n  });\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Typed } from 'emittery';\nimport { isComponent as isComponent10, Component } from './component';\nimport { isComponent as isComponent09 } from './component09';\nimport { isContainer as isContainer10, Container } from './container';\nimport { isContainer as isContainer09 } from './container09';\nimport { isContainerItem as isContainerItem10, ContainerItem } from './container-item';\nimport { isContainerItem as isContainerItem09 } from './container-item09';\nimport { Menu as Menu10 } from './menu';\nimport { Menu as Menu09 } from './menu09';\nimport { PageModel as PageModel10, Page, isPage as isPage10 } from './page';\nimport { PageModel as PageModel09, isPage as isPage09 } from './page09';\n\n/**\n * Checks whether a value is a page component.\n * @param value The value to check.\n */\nexport function isComponent(value: any): value is Component {\n  return isComponent10(value) || isComponent09(value);\n}\n\n/**\n * Checks whether a value is a page container.\n * @param value The value to check.\n */\nexport function isContainer(value: any): value is Container {\n  return isContainer10(value) || isContainer09(value);\n}\n\n/**\n * Checks whether a value is a page container item.\n * @param value The value to check.\n */\nexport function isContainerItem(value: any): value is ContainerItem {\n  return isContainerItem10(value) || isContainerItem09(value);\n}\n\n/**\n * Checks whether a value is a page.\n * @param value The value to check.\n */\nexport function isPage(value: any): value is Page {\n  return isPage10(value) || isPage09(value);\n}\n\n/**\n * Model of a page.\n */\nexport type PageModel = PageModel10 | PageModel09;\n\nexport type EventBus = Typed<{ 'page.update': { page: PageModel } }>;\n\n/**\n * Menu content model.\n */\nexport type Menu = Menu09 | (Menu09 & Menu10);\n\nexport { Component, TYPE_COMPONENT, TYPE_COMPONENT_CONTAINER, TYPE_COMPONENT_CONTAINER_ITEM } from './component';\nexport {\n  TYPE_COMPONENT as TYPE_COMPONENT_09,\n  TYPE_COMPONENT_CONTAINER as TYPE_COMPONENT_CONTAINER_09,\n  TYPE_COMPONENT_CONTAINER_ITEM as TYPE_COMPONENT_CONTAINER_ITEM_09,\n} from './component09';\nexport { ContainerItem, TYPE_CONTAINER_ITEM_UNDEFINED } from './container-item';\nexport {\n  Container,\n  TYPE_CONTAINER_BOX,\n  TYPE_CONTAINER_INLINE,\n  TYPE_CONTAINER_NO_MARKUP,\n  TYPE_CONTAINER_ORDERED_LIST,\n  TYPE_CONTAINER_UNORDERED_LIST,\n} from './container';\nexport { Content, isContent } from './content09';\nexport { Document, TYPE_DOCUMENT, isDocument } from './document';\nexport { PageEventBusService } from './page-events';\nexport { getContainerItemContent } from './container-item';\nexport { ImageSet, TYPE_IMAGE_SET, isImageSet } from './image-set';\nexport { Image } from './image';\nexport { Link, TYPE_LINK_EXTERNAL, TYPE_LINK_INTERNAL, TYPE_LINK_RESOURCE, isLink } from './link';\nexport { ManageContentButton, TYPE_MANAGE_CONTENT_BUTTON } from './button-manage-content';\nexport { MenuItem } from './menu-item';\nexport { TYPE_MANAGE_MENU_BUTTON, TYPE_MENU, isMenu } from './menu';\nexport { MetaCollection } from './meta-collection';\nexport { MetaComment, isMetaComment } from './meta-comment';\nexport { Meta, META_POSITION_BEGIN, META_POSITION_END, isMeta } from './meta';\nexport { PageFactory } from './page-factory';\nexport { PageModule } from './module';\nexport { PageModule as PageModule09 } from './module09';\nexport { Page } from './page';\nexport { PaginationItem } from './pagination-item';\nexport { Pagination, isPagination } from './pagination';\nexport { Reference, isReference } from './reference';\nexport { Visitor, Visit } from './relevance';\n","/*\n * Copyright 2021-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport cookie from 'cookie';\nimport { HttpRequest } from '../spa/http';\n\nexport class Cookie {\n  static readonly MAX_TTL_DAYS = 28;\n\n  /**\n   * Set cookie in the document\n   * @param name Cookie name\n   * @param value Cookie value\n   * @param ttl  Sets the cookie max-age in days\n   */\n  public static SET_COOKIE(name: string, value: string, ttl: number): void {\n    if (this.isWindowAvailable() && name && value) {\n      const maxAge = ttl > this.MAX_TTL_DAYS ? this.getSeconds(this.MAX_TTL_DAYS) : this.getSeconds(ttl);\n      document.cookie = cookie.serialize(name, value, { maxAge });\n    }\n  }\n\n  /**\n   * Retrieve data from cookies\n   * @return Cookie object.\n   */\n  public static GET_COOKIE(): Record<string, string> {\n    return this.isWindowAvailable() ? cookie.parse(document.cookie ?? '') : {};\n  }\n\n  /**\n   * Retrieve data from request cookies\n   * @param request Current user's request.\n   * @return Cookie object.\n   */\n  public static GET_COOKIE_FROM_REQUEST(request: HttpRequest): Record<string, string> {\n    return cookie.parse((request.headers?.cookie as string) ?? '');\n  }\n\n  /**\n   * Erase cookie in the document\n   * @param name Cookie name\n   */\n  public static ERASE_COOKIE(name: string): void {\n    if (this.isWindowAvailable()) {\n      document.cookie = cookie.serialize(name, '', { maxAge: 0 });\n    }\n  }\n\n  /**\n   * Check if Window is available\n   */\n  private static isWindowAvailable(): boolean {\n    return typeof window !== 'undefined';\n  }\n\n  /**\n   * Convert days to seconds\n   * @param days Time in days\n   * @return number\n   */\n  private static getSeconds(days: number): number {\n    return days * 24 * 60 * 60;\n  }\n}\n","/*\n * Copyright 2021-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Cookie } from './cookie';\nimport { HttpRequest } from '../spa/http';\n\nexport class Campaign {\n  static readonly CAMPAIGN_PARAMETER = '__br__campaign_id';\n\n  static readonly SEGMENT_PARAMETER = '__br__segment';\n\n  static readonly TTL_PARAMETER = '__br__ttl';\n\n  static readonly DEFAULT_TTL_DAYS = 7;\n\n  /**\n   * Get the campaign variant from URL or cookie\n   * @param campaignId Campaign id from URL\n   * @param segmentId Segment id from URL\n   * @param ttl TTL param in days from URL\n   * @param request Current user's request\n   * @return string\n   */\n  public static GET_VARIANT_ID(campaignId?: string, segmentId?: string, ttl?: string, request?: HttpRequest): string {\n    const TTL = this.getCookieTTL(ttl);\n\n    if (TTL === 0) {\n      return '';\n    }\n\n    if (campaignId && segmentId) {\n      return `${campaignId}:${segmentId}`;\n    }\n\n    const { [this.CAMPAIGN_PARAMETER]: _campaignId, [this.SEGMENT_PARAMETER]: _segmentId } = request?.headers\n      ? Cookie.GET_COOKIE_FROM_REQUEST(request)\n      : Cookie.GET_COOKIE();\n\n    if (_campaignId && _segmentId) {\n      return `${_campaignId}:${_segmentId}`;\n    }\n\n    return '';\n  }\n\n  /**\n   * Get cookie TTL value\n   * @param ttl TTL param in days\n   * @return number\n   */\n  private static getCookieTTL(ttl: string | undefined): number {\n    const TTL = Number(ttl);\n    return Number.isNaN(TTL) ? this.DEFAULT_TTL_DAYS : TTL;\n  }\n}\n","/*\n * Copyright 2021-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpRequest } from '../spa/http';\nimport { Cookie } from './cookie';\n\nexport class Segmentation {\n  static readonly SEGMENT_IDS_PARAMETER = '__br__segment_ids';\n\n  /**\n   * Get the segmentIds from cookie\n   * @return string\n   */\n  public static GET_SEGMENT_IDS(request?: HttpRequest): string {\n    const cookie = request?.headers ? Cookie.GET_COOKIE_FROM_REQUEST(request) : Cookie.GET_COOKIE();\n\n    return cookie[this.SEGMENT_IDS_PARAMETER] ?? '';\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable, optional } from 'inversify';\nimport { isConfigurationWithProxy } from '../configuration';\nimport { Logger } from '../logger';\nimport { PageModel } from '../page';\nimport { UrlBuilderService, UrlBuilder } from '../url';\nimport { HttpClientConfig, HttpClient, HttpHeaders, HttpRequest } from './http';\n\nconst DEFAULT_API_VERSION_HEADER = 'Accept-Version';\nconst DEFAULT_AUTHORIZATION_HEADER = 'Authorization';\nconst DEFAULT_SERVER_ID_HEADER = 'Server-Id';\n\nexport const ApiOptionsToken = Symbol.for('ApiOptionsToken');\nexport const ApiService = Symbol.for('ApiService');\n\nexport interface ApiOptions {\n  /**\n   * API version header.\n   * By default, `Accept-Version` will be used.\n   */\n  apiVersionHeader?: string;\n\n  /**\n   * Current API version.\n   * By default, the compatible with the current setup version will be chosen.\n   */\n  apiVersion?: string;\n\n  /**\n   * Authorization header.\n   * By default, `Authorization` will be used.\n   */\n  authorizationHeader?: string;\n\n  /**\n   * Authorization token.\n   * By default, the SDK will try to extract the token from the request query string\n   * using `authorizationQueryParameter` option.\n   */\n  authorizationToken?: string;\n\n  /**\n   * HTTP client that will be used to fetch the page model.\n   */\n  httpClient: HttpClient<PageModel>;\n\n  /**\n   * Current user's request.\n   */\n  request?: HttpRequest;\n\n  /**\n   * Header identifying the current cluster node.\n   * By default, `Server-Id` will be used.\n   */\n  serverIdHeader?: string;\n\n  /**\n   * Cluster node identifier.\n   * By default, the SDK will try to extract the value from the request query string\n   * using `serverIdQueryParameter` option.\n   */\n  serverId?: string;\n\n  /**\n   * Current visitor.\n   * This parameter takes precedence over `request.visitor`.\n   */\n  visitor?: HttpRequest['visitor'];\n}\n\nexport interface Api {\n  /**\n   * @param path Source path to generate the Page Model API URL.\n   * @returns The Page Model.\n   */\n  getPage(path: string): Promise<PageModel>;\n\n  /**\n   * The payload is used to customize the component state with properties from the client.\n   * If the payload is an empty object, the server state is used instead.\n   *\n   * @param url Component Model API URL.\n   * @param payload Payload with the component properties.\n   * @return The Page Model.\n   */\n  getComponent(url: string, payload: Record<string, unknown>): Promise<PageModel>;\n}\n\n@injectable()\nexport class ApiImpl implements Api {\n  private static getHeaders(options: ApiOptions): HttpHeaders {\n    const {\n      /** @deprecated The cookie header should be ignored when the proxy-based setup is removed. */\n      cookie,\n      referer,\n      'x-forwarded-for': ip = options.request?.connection?.remoteAddress,\n      'user-agent': userAgent,\n    } = options.request?.headers || {};\n    const {\n      apiVersionHeader = DEFAULT_API_VERSION_HEADER,\n      apiVersion,\n      authorizationHeader = DEFAULT_AUTHORIZATION_HEADER,\n      authorizationToken,\n      serverIdHeader = DEFAULT_SERVER_ID_HEADER,\n      serverId,\n      visitor = options.request?.visitor,\n    } = options;\n\n    return {\n      ...(ip && { 'X-Forwarded-For': ip }),\n      ...(apiVersion && { [apiVersionHeader]: apiVersion }),\n      ...(authorizationToken && { [authorizationHeader]: `Bearer ${authorizationToken}` }),\n      ...(isConfigurationWithProxy(options) && cookie && { Cookie: cookie }),\n      ...(referer && { Referer: referer }),\n      ...(serverId && { [serverIdHeader]: serverId }),\n      ...(userAgent && { 'User-Agent': userAgent }),\n      ...(visitor && { [visitor.header]: visitor.id }),\n      // The current cast is required because of the different types of nodejs http.request.headers and axios types,\n      // it might be removed after fixing the following issue: https://github.com/axios/axios/issues/4272\n    } as HttpHeaders;\n  }\n\n  private headers: HttpHeaders;\n\n  private httpClient: HttpClient<PageModel>;\n\n  constructor(\n    @inject(UrlBuilderService) private urlBuilder: UrlBuilder,\n    @inject(ApiOptionsToken) options: ApiOptions,\n    @inject(Logger) @optional() private logger?: Logger,\n  ) {\n    this.headers = ApiImpl.getHeaders(options);\n    this.httpClient = options.httpClient;\n  }\n\n  getPage(path: string): Promise<PageModel> {\n    const url = this.urlBuilder.getApiUrl(path);\n\n    return this.send({ url, method: 'GET' });\n  }\n\n  getComponent(url: string, payload: Record<string, unknown>): Promise<PageModel> {\n    const data = new URLSearchParams(payload as Record<string, string>);\n\n    return this.send({\n      url,\n      data: data.toString(),\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      method: Object.keys(payload || {}).length ? 'POST' : 'GET',\n    });\n  }\n\n  private async send(config: HttpClientConfig): Promise<PageModel> {\n    this.logger?.debug('Request:', config.method, config.url);\n    this.logger?.debug('Headers:', { ...this.headers, ...config.headers });\n    if (config.data) {\n      this.logger?.debug('Body:', config.data);\n    }\n\n    const response = await this.httpClient({\n      ...config,\n      headers: { ...this.headers, ...config.headers },\n    });\n\n    return response.data;\n  }\n}\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { inject, injectable, optional } from 'inversify';\nimport { CmsEventBus, CmsEventBusService, CmsUpdateEvent } from '../cms';\nimport { Logger } from '../logger';\nimport { EventBus, Page, PageEventBusService, PageFactory, PageModel } from '../page';\nimport { Api, ApiService } from './api';\n\nexport const SpaService = Symbol.for('SpaService');\n\n/**\n * SPA entry point interacting with the Channel Manager and the Page Model API.\n */\n@injectable()\nexport class Spa {\n  private page?: Page;\n\n  /**\n   * @param pageEventBus Event bus to exchange data between submodules.\n   * @param api Api client.\n   * @param pageFactory Factory to produce page instances.\n   */\n  constructor(\n    @inject(ApiService) private api: Api,\n    @inject(PageFactory) private pageFactory: PageFactory,\n    @inject(CmsEventBusService) @optional() private cmsEventBus?: CmsEventBus,\n    @inject(PageEventBusService) @optional() private pageEventBus?: EventBus,\n    @inject(Logger) @optional() private logger?: Logger,\n  ) {\n    this.onCmsUpdate = this.onCmsUpdate.bind(this);\n  }\n\n  async onCmsUpdate(event: CmsUpdateEvent): Promise<void> {\n    this.logger?.debug('Received CMS update event.');\n    this.logger?.debug('Event:', event);\n\n    const root = this.page!.getComponent();\n    const component = root.getComponentById(event.id);\n    const url = component?.getUrl();\n    if (!url) {\n      this.logger?.debug('Skipping the update event.');\n\n      return;\n    }\n\n    this.logger?.debug('Trying to request the component model.');\n    const model = await this.api.getComponent(url, event.properties);\n    this.logger?.debug('Model:', model);\n\n    this.pageEventBus?.emit('page.update', { page: model });\n  }\n\n  /**\n   * Initializes the SPA.\n   * @param modelOrPath A preloaded page model or URL to a page model.\n   */\n  initialize(modelOrPath: PageModel | string): Page | Promise<Page> {\n    if (typeof modelOrPath === 'string') {\n      this.logger?.debug('Trying to request the page model.');\n\n      return this.api.getPage(modelOrPath).then(this.hydrate.bind(this));\n    }\n\n    this.logger?.debug('Received dehydrated model.');\n\n    return this.hydrate(modelOrPath);\n  }\n\n  private hydrate(model: PageModel): Page {\n    this.logger?.debug('Model:', model);\n    this.logger?.debug('Hydrating.');\n\n    this.page = this.pageFactory(model);\n\n    if (this.page.isPreview()) {\n      this.cmsEventBus?.on('cms.update', this.onCmsUpdate);\n    }\n\n    return this.page;\n  }\n\n  /**\n   * Destroys the integration with the SPA page.\n   */\n  destroy(): void {\n    this.cmsEventBus?.off('cms.update', this.onCmsUpdate);\n    this.pageEventBus?.clearListeners();\n    delete this.page;\n\n    this.logger?.debug('Destroyed page.');\n  }\n}\n","/*\n * Copyright 2020-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ContainerModule } from 'inversify';\nimport { ApiImpl, ApiService } from './api';\nimport { SpaService, Spa } from './spa';\n\nexport function SpaModule(): ContainerModule {\n  return new ContainerModule((bind) => {\n    bind(ApiService).to(ApiImpl).inSingletonScope();\n    bind(SpaService).to(Spa).inSingletonScope();\n  });\n}\n\nexport { ApiOptionsToken, ApiOptions, ApiService, Api } from './api';\nexport { SpaService, Spa } from './spa';\n","/*\n * Copyright 2019-2023 Bloomreach\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Main entry point of the spa-sdk library.\n * @module index\n */\n\nimport { Container } from 'inversify';\nimport 'reflect-metadata';\nimport { Cms, CmsModule, CmsService, PostMessage, PostMessageService } from './cms';\nimport {\n  Configuration,\n  ConfigurationWithJwt09,\n  ConfigurationWithJwt10,\n  ConfigurationWithProxy,\n  isConfigurationWithJwt09,\n  isConfigurationWithProxy,\n} from './configuration';\nimport { Level, Logger, LoggerModule } from './logger';\nimport { isPage, Page, PageModel, PageModule, PageModule09 } from './page';\nimport { Campaign } from './services/campaign';\nimport { Segmentation } from './services/segmentation';\nimport { ApiOptionsToken, Spa, SpaModule, SpaService } from './spa';\nimport {\n  appendSearchParams,\n  extractSearchParams,\n  isMatched,\n  parseUrl,\n  UrlBuilderOptionsToken,\n  UrlModule,\n  UrlModule09,\n} from './url';\n\nconst DEFAULT_AUTHORIZATION_PARAMETER = 'token';\nconst DEFAULT_SERVER_ID_PARAMETER = 'server-id';\n\nconst BTM_PREFIX = 'btm_';\nconst DEFAULT_CAMPAIGN_VARIANT_PARAMETER_URL = `${BTM_PREFIX}campaign_id`;\nconst DEFAULT_SEGMENT_PARAMETER_URL = `${BTM_PREFIX}segment`;\nconst DEFAULT_TTL_PARAMETER_URL = `${BTM_PREFIX}ttl`;\n\nconst BR_PREFIX = '__br__';\nconst DEFAULT_CAMPAIGN_VARIANT_PARAMETER_API = `${BR_PREFIX}campaignVariant`;\nconst DEFAULT_SEGMENT_IDS_PARAMETER_API = `${BR_PREFIX}segmentIds`;\n\nconst container = new Container({ skipBaseClassChecks: true });\nconst pages = new WeakMap<Page, Container>();\n\ncontainer.load(CmsModule(), LoggerModule(), UrlModule());\n\nfunction onReady<T>(value: T | Promise<T>, callback: (cbValue: T) => unknown): T | Promise<T> {\n  // eslint-disable-next-line no-sequences\n  const wrapper = (result: T): T => (callback(result), result);\n\n  return value instanceof Promise ? value.then(wrapper) : wrapper(value);\n}\n\nfunction initializeWithProxy(\n  scope: Container,\n  configuration: ConfigurationWithProxy,\n  model?: PageModel,\n): Page | Promise<Page> {\n  const logger = scope.get(Logger);\n\n  logger.info('Enabled reverse-proxy based setup.');\n  logger.warn('This setup is deprecated and will not work in the next major release.');\n  logger.debug('Path:', configuration.path ?? configuration.request?.path ?? '/');\n  logger.debug('Base URL:', configuration.options.preview.spaBaseUrl);\n\n  const options = isMatched(\n    configuration.path ?? configuration.request?.path ?? '/',\n    configuration.options.preview.spaBaseUrl,\n  )\n    ? configuration.options.preview\n    : configuration.options.live;\n\n  logger.info(`Using ${options === configuration.options.preview ? 'preview' : 'live'} configuration.`);\n\n  const config = {\n    ...configuration,\n    NBRMode: configuration.NBRMode || false,\n  };\n\n  scope.load(PageModule09(), SpaModule(), UrlModule09());\n  scope.bind(ApiOptionsToken).toConstantValue(config);\n  scope.bind(UrlBuilderOptionsToken).toConstantValue(options);\n  scope.getNamed<Cms>(CmsService, 'cms14').initialize(configuration);\n\n  return onReady(\n    scope.get<Spa>(SpaService).initialize(model ?? configuration.path ?? configuration.request?.path ?? '/'),\n    () => {\n      scope.unbind(ApiOptionsToken);\n      scope.unbind(UrlBuilderOptionsToken);\n    },\n  );\n}\n\nfunction initializeWithJwt09(\n  scope: Container,\n  configuration: ConfigurationWithJwt09,\n  model?: PageModel,\n): Page | Promise<Page> {\n  const logger = scope.get(Logger);\n\n  logger.info('Enabled token-based setup.');\n  logger.info('Using Page Model API 0.9.');\n  logger.warn('This version of the Page Model API is deprecated and will be removed in the next major release.');\n\n  const authorizationParameter = configuration.authorizationQueryParameter ?? DEFAULT_AUTHORIZATION_PARAMETER;\n  const serverIdParameter = configuration.serverIdQueryParameter ?? DEFAULT_SERVER_ID_PARAMETER;\n  const { url: path, searchParams } = extractSearchParams(\n    configuration.path ?? configuration.request?.path ?? '/',\n    [authorizationParameter, serverIdParameter].filter(Boolean),\n  );\n  const authorizationToken = searchParams.get(authorizationParameter) ?? undefined;\n  const serverId = searchParams.get(serverIdParameter) ?? undefined;\n  const config = {\n    ...configuration,\n    origin: configuration.origin ?? parseUrl(configuration.apiBaseUrl ?? configuration.cmsBaseUrl ?? '').origin,\n    spaBaseUrl: appendSearchParams(configuration.spaBaseUrl ?? '', searchParams),\n    NBRMode: configuration.NBRMode || false,\n  };\n\n  if (authorizationToken) {\n    logger.debug('Token:', authorizationToken);\n  }\n\n  if (serverId) {\n    logger.debug('Server Id:', serverId);\n  }\n\n  logger.debug('Origin:', config.origin);\n  logger.debug('Path:', path);\n  logger.debug('Base URL:', config.spaBaseUrl);\n\n  scope.load(PageModule09(), SpaModule(), UrlModule09());\n  scope.bind(ApiOptionsToken).toConstantValue({ authorizationToken, serverId, ...config });\n  scope.bind(UrlBuilderOptionsToken).toConstantValue(config);\n\n  return onReady(scope.get<Spa>(SpaService).initialize(model ?? path), (page) => {\n    if (page.isPreview() && config.cmsBaseUrl) {\n      logger.info('Running in preview mode.');\n      scope.get<PostMessage>(PostMessageService).initialize(config);\n      scope.get<Cms>(CmsService).initialize(config);\n    } else {\n      logger.info('Running in live mode.');\n    }\n\n    scope.unbind(ApiOptionsToken);\n    scope.unbind(UrlBuilderOptionsToken);\n  });\n}\n\nfunction initializeWithJwt10(\n  scope: Container,\n  configuration: ConfigurationWithJwt10,\n  model?: PageModel,\n): Page | Promise<Page> {\n  const logger = scope.get(Logger);\n\n  logger.info('Enabled token-based setup.');\n  logger.info('Using Page Model API 1.0.');\n\n  const authorizationParameter = configuration.authorizationQueryParameter ?? DEFAULT_AUTHORIZATION_PARAMETER;\n  const serverIdParameter = configuration.serverIdQueryParameter ?? DEFAULT_SERVER_ID_PARAMETER;\n  const campaignParameter = DEFAULT_CAMPAIGN_VARIANT_PARAMETER_URL;\n  const segmentParameter = DEFAULT_SEGMENT_PARAMETER_URL;\n  const ttlParameter = DEFAULT_TTL_PARAMETER_URL;\n\n  const { url: path, searchParams } = extractSearchParams(\n    configuration.path ?? configuration.request?.path ?? '/',\n    [authorizationParameter, serverIdParameter, campaignParameter, segmentParameter, ttlParameter].filter(Boolean),\n  );\n\n  const authorizationToken = searchParams.get(authorizationParameter) ?? undefined;\n  const serverId = searchParams.get(serverIdParameter) ?? undefined;\n  const campaignId = searchParams.get(campaignParameter) ?? undefined;\n  const segmentId = searchParams.get(segmentParameter) ?? undefined;\n  const ttl = searchParams.get(ttlParameter) ?? undefined;\n\n  let endpointUrl = configuration.endpoint;\n\n  const campaignVariantId = Campaign.GET_VARIANT_ID(campaignId, segmentId, ttl, configuration.request);\n  const segmentIds = Segmentation.GET_SEGMENT_IDS(configuration.request);\n\n  const params = new URLSearchParams();\n\n  if (campaignVariantId) {\n    params.append(DEFAULT_CAMPAIGN_VARIANT_PARAMETER_API, campaignVariantId);\n  }\n  if (segmentIds) {\n    params.append(DEFAULT_SEGMENT_IDS_PARAMETER_API, segmentIds);\n  }\n  endpointUrl = appendSearchParams(endpointUrl ?? '', params);\n\n  const config = {\n    ...configuration,\n    endpoint: endpointUrl,\n    baseUrl: appendSearchParams(configuration.baseUrl ?? '', searchParams),\n    origin: configuration.origin ?? parseUrl(configuration.endpoint ?? '').origin,\n    NBRMode: configuration.NBRMode || false,\n  };\n\n  if (authorizationToken) {\n    logger.debug('Token:', authorizationToken);\n  }\n\n  if (serverId) {\n    logger.debug('Server Id:', serverId);\n  }\n\n  if (campaignId) {\n    logger.debug('Campaign Id:', campaignId);\n  }\n\n  if (segmentId) {\n    logger.debug('Segment Id:', segmentId);\n  }\n\n  if (ttl) {\n    logger.debug('TTL:', ttl);\n  }\n\n  if (campaignVariantId) {\n    logger.debug('Campaign variant Id:', campaignVariantId);\n  }\n\n  logger.debug('Endpoint:', config.endpoint);\n  logger.debug('Origin:', config.origin);\n  logger.debug('Path:', path);\n  logger.debug('Base URL:', config.baseUrl);\n\n  scope.load(PageModule(), SpaModule(), UrlModule());\n  scope.bind(ApiOptionsToken).toConstantValue({ authorizationToken, serverId, ...config });\n  scope.bind(UrlBuilderOptionsToken).toConstantValue(config);\n\n  return onReady(scope.get<Spa>(SpaService).initialize(model ?? path), (page) => {\n    if (page.isPreview() && config.endpoint) {\n      logger.info('Running in preview mode.');\n      scope.get<PostMessage>(PostMessageService).initialize(config);\n      scope.get<Cms>(CmsService).initialize(config);\n    } else {\n      logger.info('Running in live mode.');\n    }\n\n    scope.unbind(ApiOptionsToken);\n    scope.unbind(UrlBuilderOptionsToken);\n  });\n}\n\n/**\n * Initializes the page model.\n *\n * @param configuration Configuration of the SPA integration with brXM.\n * @param model Preloaded page model.\n */\nexport function initialize(configuration: Configuration, model: Page | PageModel): Page;\n\n/**\n * Initializes the page model.\n *\n * @param configuration Configuration of the SPA integration with brXM.\n * @param [model] Preloaded page model.\n */\nexport async function initialize(configuration: Configuration): Promise<Page>;\n\nexport function initialize(configuration: Configuration, model?: Page | PageModel): Page | Promise<Page> {\n  if (isPage(model)) {\n    return model;\n  }\n\n  const scope = container.createChild();\n  const logger = scope.get(Logger);\n\n  logger.level = configuration.debug ? Level.Debug : Level.Error;\n  logger.debug('Configuration:', configuration);\n\n  return onReady(\n    // eslint-disable-next-line no-nested-ternary\n    isConfigurationWithProxy(configuration)\n      ? initializeWithProxy(scope, configuration, model)\n      : isConfigurationWithJwt09(configuration)\n        ? initializeWithJwt09(scope, configuration, model)\n        : initializeWithJwt10(scope, configuration, model),\n    (page) => {\n      pages.set(page, scope);\n      configuration.request?.emit?.('br:spa:initialized', page);\n    },\n  );\n}\n\n/**\n * Destroys the integration with the SPA page.\n * @param page Page instance to destroy.\n */\nexport function destroy(page: Page): void {\n  const scope = pages.get(page);\n  pages.delete(page);\n\n  scope?.get<Spa>(SpaService).destroy();\n}\n\nexport { Configuration } from './configuration';\nexport {\n  Component,\n  ContainerItem,\n  Container,\n  Content,\n  Document,\n  ImageSet,\n  Image,\n  Link,\n  ManageContentButton,\n  MenuItem,\n  Menu,\n  MetaCollection,\n  MetaComment,\n  Meta,\n  PageModel,\n  Page,\n  PaginationItem,\n  Pagination,\n  Reference,\n  getContainerItemContent,\n  isComponent,\n  isContainerItem,\n  isContainer,\n  isContent,\n  isDocument,\n  isImageSet,\n  isLink,\n  isMenu,\n  isMetaComment,\n  isMeta,\n  isPage,\n  isPagination,\n  isReference,\n  META_POSITION_BEGIN,\n  META_POSITION_END,\n  TYPE_CONTAINER_BOX,\n  TYPE_CONTAINER_INLINE,\n  TYPE_CONTAINER_NO_MARKUP,\n  TYPE_CONTAINER_ORDERED_LIST,\n  TYPE_CONTAINER_UNORDERED_LIST,\n  TYPE_CONTAINER_ITEM_UNDEFINED,\n  TYPE_LINK_EXTERNAL,\n  TYPE_LINK_INTERNAL,\n  TYPE_LINK_RESOURCE,\n  TYPE_MANAGE_CONTENT_BUTTON,\n  TYPE_MANAGE_MENU_BUTTON,\n} from './page';\nexport { extractSearchParams } from './url/utils';\n"],"names":["Level","Logger","constructor","this","level","Error","debug","log","bind","Debug","info","Info","warn","Warn","error","message","levels","Object","values","includes","indexOf","write","toUpperCase","__decorate","injectable","ConsoleToken","Symbol","for","ConsoleLogger","console","super","__param","inject","LoggerModule","ContainerModule","toConstantValue","toSelf","inSingletonScope","toService","CmsEventBusService","EmitterMixin","Super","emitter","Typed","on","off","emit","RpcClientService","RpcServerService","TYPE_EVENT","TYPE_RESPONSE","TYPE_REQUEST","STATE_FULFILLED","STATE_REJECTED","Dummy","Rpc","calls","Map","callbacks","generateId","id","Math","random","slice","has","call","command","payload","Promise","resolve","reject","set","send","type","register","callback","trigger","event","process","processEvent","processResponse","processRequest","response","get","delete","state","result","request","CmsService","GLOBAL_WINDOW","window","undefined","CmsImpl","rpcClient","rpcServer","cmsEventBus","logger","onStateChange","_a","onPageReady","onUpdate","initialize","_b","document","readyState","onInitialize","_d","_c","addEventListener","removeEventListener","resource","script","createElement","src","body","appendChild","optional","Cms14Impl","eventBus","postponed","flush","splice","forEach","task","postpone","args","api","apply","push","SPA","sync","init","onInit","renderComponent","onRenderComponent","properties","parseUrl","url","DUMMY_BASE_URL","parsedUrl","URL","hash","search","searchParams","origin","pathname","startsWith","replace","protocol","substring","path","buildUrl","toString","_e","_f","_g","mergeSearchParams","params","rest","URLSearchParams","restParams","value","key","appendSearchParams","extractSearchParams","extracted","param","isAbsoluteUrl","isMatchedOrigin","baseOrigin","schema","host","split","baseSchema","baseHost","isMatchedPathname","basePathname","isMatchedQuery","baseSearch","match","getAll","isMatched","link","base","linkUrl","baseUrl","resolveUrl","sourceUrl","endsWith","UrlBuilderOptionsToken","UrlBuilderService","UrlBuilderImpl","options","endpoint","getApiUrl","route","length","getSpaUrl","UrlModule","to","DEFAULT_API_BASE_URL","DEFAULT_SPA_BASE_URL","apiBaseUrl","cmsBaseUrl","spaBaseUrl","PostMessageService","PostMessage","onMessage","parent","postMessage","data","CmsModule","toDynamicValue","when","whenTargetIsDefault","whenTargetNamed","isConfigurationWithProxy","live","preview","isConfigurationWithJwt09","TYPE_LINK_EXTERNAL","TYPE_LINK_INTERNAL","TYPE_LINK_RESOURCE","TYPE_LINK_UNKNOWN","isLink","prototype","hasOwnProperty","SimpleFactory","mapping","builder","LinkFactory","create","createLink","createPath","href","MetaCollectionFactory","ComponentChildrenToken","ComponentModelToken","TYPE_COMPONENT","TYPE_COMPONENT_CONTAINER","TYPE_COMPONENT_CONTAINER_ITEM","TYPE_COMPONENT_CONTAINER_ITEM_CONTENT","ComponentImpl","model","children","linkFactory","metaFactory","meta","getId","getMeta","getModels","models","getUrl","links","self","getName","name","getParameters","getProperties","getChildren","getComponent","componentNames","component","shift","find","childComponent","getComponentById","queue","Function","isComponent","urlBuilder","_meta","_links","componentRendering","TYPE_CONTAINER_BOX","TYPE_CONTAINER_UNORDERED_LIST","TYPE_CONTAINER_ORDERED_LIST","TYPE_CONTAINER_INLINE","TYPE_CONTAINER_NO_MARKUP","ContainerImpl","getType","xtype","toLowerCase","isContainer","PageEventBusService","isReference","$ref","object","reference","reduce","TYPE_CONTAINER_ITEM_UNDEFINED","getContainerItemContent","page","contentRef","getContentReference","componentContent","getContent","ContainerItemImpl","onPageUpdate","root","getLabel","label","ctype","isHidden","hidden","paramsInfo","content","__metadata","isContainerItem","TYPE_META_COMMENT","META_POSITION_BEGIN","META_POSITION_END","MetaImpl","position","getData","getPosition","isMeta","HTML_COMMENT","MetaCommentImpl","isMetaComment","MetaFactory","MetaCollectionModelToken","MetaCollectionImpl","MetaCollectionImpl_1","Array","beginNodeSpan","map","beginModel","endNodeSpan","endModel","comments","setPrototypeOf","freeze","clear","comment","remove","index","render","head","tail","ownerDocument","filter","createComment","parentNode","insertBefore","reverse","nextSibling","isMetaCollection","ButtonFactory","metaCollectionFactory","ComponentFactory","heap","pool","i","previous","child","buildComponent","ContentFactory","LinkRewriterService","LinkRewriterImpl","rewrite","parseDocument","xmlMode","rewriteAnchors","rewriteImages","selfClosingTags","from","getElementsByTagName","element","hasAttrib","getAttributeValue","attribs","PageModelToken","PageImpl","buttonFactory","componentFactory","contentFactory","linkRewriter","pageEventBus","WeakMap","assign","getButton","getChannelParameters","channel","props","alert","trace","getDocument","getLocale","locale","getTitle","pageTitle","site","getVersion","version","getVisitor","visitor","getVisit","visit","isPreview","rewriteLinks","toJSON","isPage","components","unshift","componentModel","siblings","PageImpl_1","entries","alias","m","static","contentReference","ContentModelToken","ContentImpl","localeString","isContent","DocumentModelToken","TYPE_DOCUMENT","DocumentImpl","isDocument","ImageFactory","ImageModelToken","ImageImpl","getDisplayName","displayName","getFileName","fileName","getHeight","height","getMimeType","mimeType","getSize","size","getWidth","width","ImageSetModelToken","TYPE_IMAGE_SET","ImageSetImpl","imageFactory","original","thumbnail","getDescription","description","getOriginal","getThumbnail","isImageSet","TYPE_MANAGE_CONTENT_BUTTON","createManageContentButton","documentTemplateQuery","folderTemplateQuery","parameter","relative","pickerEnableUpload","pickerConfiguration","pickerInitialPath","pickerRemembersLastVisited","pickerRootPath","pickerSelectableNodeTypes","fromEntries","JSON","stringify","merge","item","parse","MenuItemFactory","MenuItemModelToken","MenuItemImpl","menuItemFactory","childMenuItems","getDepth","depth","getLink","parameters","isExpanded","expanded","isRepositoryBased","repositoryBased","isSelected","selected","MenuModelToken","TYPE_MANAGE_MENU_BUTTON","TYPE_MENU","MenuImpl","items","siteMenuItems","selectSiteMenuItem","getItems","getSelected","isMenu","PageFactory","PaginationItemFactory","PaginationItemModelToken","PaginationItemImpl","getNumber","number","PaginationModelToken","TYPE_PAGINATION","PaginationImpl","paginationItemFactory","current","first","last","next","pages","getCurrent","getFirst","getLast","getNext","getOffset","offset","getPages","getPrevious","getTotal","total","isEnabled","enabled","isPagination","PageModule","onActivation","context","factory","menu","container","toFactory","scope","createChild","isComponent10","isComponent09","isContainer10","isContainer09","isContainerItem10","isContainerItem09","isPage10","isPage09","Cookie","ttl","isWindowAvailable","maxAge","MAX_TTL_DAYS","getSeconds","cookie","serialize","headers","days","Campaign","campaignId","segmentId","TTL","getCookieTTL","CAMPAIGN_PARAMETER","_campaignId","SEGMENT_PARAMETER","_segmentId","GET_COOKIE_FROM_REQUEST","GET_COOKIE","Number","isNaN","DEFAULT_TTL_DAYS","TTL_PARAMETER","Segmentation","SEGMENT_IDS_PARAMETER","DEFAULT_API_VERSION_HEADER","DEFAULT_AUTHORIZATION_HEADER","DEFAULT_SERVER_ID_HEADER","ApiOptionsToken","ApiService","ApiImpl","ApiImpl_1","getHeaders","httpClient","referer","ip","connection","remoteAddress","userAgent","apiVersionHeader","apiVersion","authorizationHeader","authorizationToken","serverIdHeader","serverId","Referer","header","getPage","method","keys","config","SpaService","Spa","pageFactory","onCmsUpdate","modelOrPath","then","hydrate","destroy","clearListeners","SpaModule","DEFAULT_AUTHORIZATION_PARAMETER","DEFAULT_SERVER_ID_PARAMETER","BTM_PREFIX","DEFAULT_CAMPAIGN_VARIANT_PARAMETER_URL","DEFAULT_SEGMENT_PARAMETER_URL","DEFAULT_TTL_PARAMETER_URL","BR_PREFIX","DEFAULT_CAMPAIGN_VARIANT_PARAMETER_API","DEFAULT_SEGMENT_IDS_PARAMETER_API","Container","skipBaseClassChecks","load","onReady","wrapper","initializeWithProxy","configuration","NBRMode","PageModule09","UrlModule09","getNamed","_j","_h","unbind","initializeWithJwt09","authorizationParameter","authorizationQueryParameter","serverIdParameter","serverIdQueryParameter","Boolean","_k","_l","initializeWithJwt10","campaignParameter","segmentParameter","ttlParameter","endpointUrl","campaignVariantId","GET_VARIANT_ID","segmentIds","GET_SEGMENT_IDS","append","_m","_o"],"mappings":"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"}